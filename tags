!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
"	plugin/xptemplate.conf.vim	/^    inoremap <silent> " <C-v><C-v><BS><C-r>=XPTtgr('"',{'noliteral':1,'k':'"'})<cr>$/;"	m
'	plugin/xptemplate.conf.vim	/^    inoremap <silent> ' <C-v><C-v><BS><C-r>=XPTtgr('''',{'noliteral':1,'k':''''})<cr>$/;"	m
(	plugin/xptemplate.conf.vim	/^    inoremap <silent> ( <C-v><C-v><BS><C-r>=XPTtgr('(',{'noliteral':1,'k':'('})<cr>$/;"	m
(`elem~	xptsnippets/ftplugin/haskell/haskell.xpt.vim	/^map (`elem~ -> `expr~) `list~$/;"	m
<Plug>XPTdoBreakUndo	plugin/xptemplate.vim	/^inoremap <silent> <Plug>XPTdoBreakUndo <C-r>=<SID>DoBreakUndo()<CR>$/;"	m
Abbr	plugin/xptemplate.vim	/^fun! s:Abbr( name ) "{{{$/;"	f
ActionFinish	plugin/xptemplate.vim	/^fun! s:ActionFinish( filter ) "{{{$/;"	f
ActionFinish	plugin/xptemplate.vim	/^fun! s:ActionFinish( renderContext, filter ) "{{{$/;"	f
ActivateItemMapping	plugin/xptemplate.vim	/^fun! s:ActivateItemMapping() "{{{$/;"	f
ActivateItemTempMapping	plugin/xptemplate.vim	/^fun! s:ActivateItemTempMapping() "{{{$/;"	f
AddContextIndentToRst	autoload/xpt/flt.vim	/^fun! s:AddContextIndentToRst( flt ) "{{{$/;"	f
AddCursorToComeLast	plugin/xptemplate.vim	/^fun! s:AddCursorToComeLast(setting) "{{{$/;"	f
AddIndent	plugin/xptemplate.vim	/^fun! s:AddIndent( text, nIndent ) "{{{$/;"	f
AddIndentToPHs	autoload/xpt/flt.vim	/^fun! s:AddIndentToPHs( flt ) "{{{$/;"	f
AddIndentToText	autoload/xpt/flt.vim	/^fun! s:AddIndentToText( flt ) "{{{$/;"	f
AddItemToRenderContext	plugin/xptemplate.vim	/^fun! s:AddItemToRenderContext( ctx, item ) "{{{$/;"	f
AddToOrderList	autoload/xpt/rctx.vim	/^fun! s:AddToOrderList( list, g ) "{{{$/;"	f
AddToOrderList	plugin/xptemplate.vim	/^fun! s:AddToOrderList( list, item ) "{{{$/;"	f
AdjustIndentAt	plugin/xptemplate.vim	/^fun! s:AdjustIndentAt( text, startPos ) "{{{$/;"	f
Append	autoload/xpt/render.vim	/^fun! s:Append( render, ph, key ) "{{{$/;"	f
ApplyBuildTimeInclusion	plugin/xptemplate.vim	/^fun! s:ApplyBuildTimeInclusion( placeHolder, nameInfo, valueInfo ) "{{{$/;"	f
ApplyDefaultValue	plugin/xptemplate.vim	/^fun! s:ApplyDefaultValue() "{{{$/;"	f
ApplyDefaultValueToPH	plugin/xptemplate.vim	/^fun! s:ApplyDefaultValueToPH( filter ) "{{{$/;"	f
ApplyDefaultValueToPH	plugin/xptemplate.vim	/^fun! s:ApplyDefaultValueToPH( renderContext, filter ) "{{{$/;"	f
ApplyInstantValue	plugin/xptemplate.vim	/^fun! s:ApplyInstantValue( placeHolder, nameInfo, valueInfo ) "{{{$/;"	f
ApplyMap	plugin/xptemplate.vim	/^fun! s:ApplyMap() " {{{$/;"	f
ApplyMapAndSetting	plugin/xpopup.vim	/^fun! s:ApplyMapAndSetting() "{{{$/;"	f
ApplyPostFilter	plugin/xptemplate.vim	/^fun! s:ApplyPostFilter() "{{{$/;"	f
ApplyPreValues	plugin/xptemplate.vim	/^fun! s:ApplyPreValues( placeHolder ) "{{{$/;"	f
Assert	plugin/debug.vim	/^com! -nargs=+ Assert call Assert( <args>, <q-args> )$/;"	c
Assert	plugin/debug.vim	/^fun! Assert( shouldBeTrue, msg ) "{{{$/;"	f
Assert	plugin/xptemplate.vim	/^com! -nargs=+ Assert call xpt#debug#Assert( <args>, <q-args> )$/;"	c
AssignSnipFT	autoload/xpt/parser.vim	/^fun! s:AssignSnipFT( filename ) "{{{$/;"	f
BreakUndo	plugin/xptemplate.vim	/^fun! s:BreakUndo() "{{{$/;"	f
BufData	plugin/xpmark.vim	/^fun! s:BufData() "{{{$/;"	f
BuildItemForPlaceHolder	plugin/xptemplate.vim	/^fun! s:BuildItemForPlaceHolder( placeHolder ) "{{{$/;"	f
BuildMarksOfPlaceHolder	plugin/xptemplate.vim	/^fun! s:BuildMarksOfPlaceHolder( item, placeHolder, nameInfo, valueInfo ) "{{{$/;"	f
BuildPH	autoload/xpt/render.vim	/^fun! s:BuildPH( render, ph ) "{{{$/;"	f
BuildPlaceHolders	plugin/xptemplate.vim	/^fun! s:BuildPlaceHolders( markRange ) "{{{$/;"	f
BuildSnippet	plugin/xptemplate.vim	/^fun! s:BuildSnippet(nameStartPosition, nameEndPosition) " {{{$/;"	f
CachedCompileExpr	plugin/xptemplate.vim	/^fun! s:CachedCompileExpr( s, xfunc ) "{{{$/;"	f
CalculateIndentation	xptsnippets/ftplugin/cpp/autoimplem.xpt.vim	/^fun! s:CalculateIndentation( ln ) "{{{$/;"	f
CallPlugin	plugin/xptemplate.vim	/^fun! s:CallPlugin(ev, when) "{{{$/;"	f
CheckAndFinish	plugin/xpopup.vim	/^fun! s:CheckAndFinish() "{{{$/;"	f
ClassPrototype	plugin/xpmark.vim	/^fun! s:ClassPrototype(...) "{{{$/;"	f
ClassPrototype	plugin/xpopup.vim	/^fun! s:ClassPrototype(...) "{{{$/;"	f
CleanupCurrentItem	plugin/xptemplate.vim	/^fun! s:CleanupCurrentItem() "{{{$/;"	f
ClearHL	plugin/xpt.plugin.highlight.vim	/^    fun! s:ClearHL(x, ctx) "{{{$/;"	f
ClearItemMapping	plugin/xptemplate.vim	/^fun! s:ClearItemMapping( rctx ) "{{{$/;"	f
ClearMap	plugin/xptemplate.vim	/^fun! s:ClearMap() " {{{$/;"	f
ClearMapAndSetting	plugin/xpopup.vim	/^fun! s:ClearMapAndSetting() "{{{$/;"	f
CompileExpr	plugin/xptemplate.vim	/^fun! s:CompileExpr(s, xfunc) "{{{$/;"	f
CompileSnippetFile	autoload/xpt/parser.vim	/^fun s:CompileSnippetFile( fn ) "{{{$/;"	f
ConcreteSpace	plugin/xptemplate.vim	/^fun! s:ConcreteSpace() "{{{$/;"	f
ConvertSpaceToTab	plugin/xpreplace.vim	/^fun! s:ConvertSpaceToTab( text ) "{{{$/;"	f
Crash	plugin/xptemplate.vim	/^fun! s:Crash(...) "{{{$/;"	f
CreateLogger	plugin/debug.vim	/^fun! CreateLogger( level ) "{{{$/;"	f
CreatePHMarkNames	autoload/xpt/render.vim	/^fun! s:CreatePHMarkNames( rctx, g, ph ) "{{{$/;"	f
CreatePairsMap	xptsnippets/ftplugin/_common/common.bracketcmpl.xpt.vim	/^fun! s:CreatePairsMap()$/;"	f
CreatePlaceHolder	plugin/xptemplate.vim	/^fun! s:CreatePlaceHolder( ctx, nameInfo, valueInfo ) "{{{$/;"	f
CreatePluginContainer	plugin/xptemplate.vim	/^fun! s:CreatePluginContainer( ... ) "{{{$/;"	f
CreateSession	plugin/xpopup.vim	/^fun! s:CreateSession( sess ) "{{{$/;"	f
CreateSnip	autoload/xpt/test/phfilter.vim	/^fun! s:CreateSnip( text, ... ) "{{{$/;"	f
CreateStringMask	autoload/xpt/eval.vim	/^fun! s:CreateStringMask( str ) "{{{$/;"	f
CreateStringMask	plugin/xptemplate.vim	/^fun! s:CreateStringMask( str ) "{{{$/;"	f
Debug	autoload/xpt/debug.vim	/^fun! s:Debug(...) dict "{{{$/;"	f
Debug	plugin/debug.vim	/^fun! s:Debug(...) dict "{{{$/;"	f
DebugGetSID	plugin/debug.vim	/^com! DebugGetSID let s:sid =  matchstr("<SID>", '\\zs\\d\\+_\\ze')$/;"	c
DefaultValuePumHandler	plugin/xptemplate.vim	/^fun! s:DefaultValuePumHandler( renderContext, filter ) "{{{$/;"	f
DefaultValueShowPum	plugin/xptemplate.vim	/^fun! s:DefaultValueShowPum( renderContext, filter ) "{{{$/;"	f
DoBreakUndo	plugin/xptemplate.vim	/^fun! s:DoBreakUndo() "{{{$/;"	f
DoCompile	autoload/xpt/eval.vim	/^fun! s:DoCompile(s, xfunc) "{{{$/;"	f
DoGotoNextItem	plugin/xptemplate.vim	/^fun! s:DoGotoNextItem() "{{{$/;"	f
DoInclude	plugin/xptemplate.vim	/^fun! s:DoInclude( tmplDict, tmplObject, pattern, keepCursor ) "{{{$/;"	f
DoStart	plugin/xptemplate.vim	/^fun! s:DoStart( sess ) " {{{$/;"	f
DoUpdate	plugin/xptemplate.vim	/^fun! s:DoUpdate( renderContext, changeType ) "{{{$/;"	f
EmbedSnippetInLeadingPlaceHolder	plugin/xptemplate.vim	/^fun! s:EmbedSnippetInLeadingPlaceHolder( ctx, snippet ) "{{{$/;"	f
End	plugin/xpopup.vim	/^fun! s:End() "{{{$/;"	f
Error	autoload/xpt/debug.vim	/^fun! s:Error(...) dict "{{{$/;"	f
Error	plugin/debug.vim	/^fun! s:Error(...) dict "{{{$/;"	f
EscapeMap	plugin/xptemplate.conf.vim	/^fun! s:EscapeMap( s ) "{{{$/;"	f
Eval	plugin/xptemplate.vim	/^fun! s:Eval(str, container, ...) "{{{$/;"	f
EvalFilter	plugin/xptemplate.vim	/^fun! s:EvalFilter( filter, container, context ) "{{{$/;"	f
EvalPHElt	autoload/xpt/phfilter.vim	/^fun! s:EvalPHElt( fctx, ... ) "{{{$/;"	f
EvalPostFilter	plugin/xptemplate.vim	/^fun! s:EvalPostFilter( filter, typed, leader ) "{{{$/;"	f
EvaluateEdge	plugin/xptemplate.vim	/^fun! s:EvaluateEdge( xp, item, ph ) "{{{$/;"	f
ExtractAttr	xptsnippets/ftplugin/html/html.xpt.vim	/^fun! s:ExtractAttr( elts, mark, attrName ) "{{{$/;"	f
ExtractOneItem	plugin/xptemplate.vim	/^fun! s:ExtractOneItem() "{{{$/;"	f
FallbackKey	plugin/xptemplate.vim	/^fun! s:FallbackKey() "{{{$/;"	f
Fatal	autoload/xpt/debug.vim	/^fun! s:Fatal(...) dict "{{{$/;"	f
Fatal	plugin/debug.vim	/^fun! s:Fatal(...) dict "{{{$/;"	f
Feedkeys	plugin/xptemplateTest.vim	/^fun! s:Feedkeys( text, mode )$/;"	f
FillinLeadingPlaceHolderAndSelect	plugin/xptemplate.vim	/^fun! s:FillinLeadingPlaceHolderAndSelect( ctx, str ) "{{{$/;"	f
FillinTemplate	plugin/xptemplateTest.vim	/^fun! s:FillinTemplate() "{{{$/;"	f
FindShorter	plugin/xpopup.vim	/^fun! s:FindShorter(map, key) "{{{$/;"	f
FinishCurrent	plugin/xptemplate.vim	/^fun! s:FinishCurrent( action ) "{{{$/;"	f
FinishRendering	plugin/xptemplate.vim	/^fun! s:FinishRendering(...) "{{{$/;"	f
GetContextFT	plugin/xptemplate.vim	/^fun! s:GetContextFT() "{{{$/;"	f
GetContextFTObj	plugin/xptemplate.vim	/^fun! s:GetContextFTObj() "{{{$/;"	f
GetIndentBeforeEdge	plugin/xptemplate.vim	/^fun! s:GetIndentBeforeEdge( tmplObj, textBeforeLeftMark ) "{{{$/;"	f
GetKeyType	autoload/xpt/parser.vim	/^fun! s:GetKeyType( rawKey ) "{{{$/;"	f
GetMappingLine	autoload/xpt/msvr.vim	/^fun! s:GetMappingLine(key, mode, isbuffer) "{{{$/;"	f
GetMark	syntax/xpt.vim	/^fun! s:GetMark()$/;"	f
GetNameInfo	plugin/xptemplate.vim	/^fun! s:GetNameInfo(end) "{{{$/;"	f
GetOnfocus	plugin/xptemplate.vim	/^fun! s:GetOnfocus() "{{{$/;"	f
GetSnipFileFT	plugin/xptemplate.vim	/^fun! g:GetSnipFileFT() "{{{$/;"	f
GetSnipFileFtScope	plugin/xptemplate.vim	/^fun! g:GetSnipFileFtScope() "{{{$/;"	f
GetSnippetExtension	plugin/xptemplate.vim	/^fun! s:GetSnippetExtension( line ) "{{{$/;"	f
GetStack	autoload/xpt/msvr.vim	/^fun! s:GetStack( isLocal ) "{{{$/;"	f
GetTempSnipScope	plugin/xptemplate.vim	/^fun! s:GetTempSnipScope( x, ft ) "{{{$/;"	f
GetTextBeforeCursor	plugin/xpopup.vim	/^fun! s:GetTextBeforeCursor( sess ) "{{{$/;"	f
GetUnescapeCharPattern	autoload/xpt/util.vim	/^fun! s:GetUnescapeCharPattern( chars ) "{{{$/;"	f
GetValueInfo	plugin/xptemplate.vim	/^fun! s:GetValueInfo( end ) "{{{$/;"	f
GetXSETkeyAndValue	autoload/xpt/parser.vim	/^fun! s:GetXSETkeyAndValue(lines, start) "{{{$/;"	f
Goback	plugin/xptemplate.vim	/^fun! s:Goback() "{{{$/;"	f
GotoNextItem	plugin/xptemplate.vim	/^fun! s:GotoNextItem() "{{{$/;"	f
GotoRelativePosToMark	plugin/xptemplate.vim	/^fun! s:GotoRelativePosToMark( rPos, mark ) "{{{$/;"	f
HL	plugin/xpt.plugin.highlight.vim	/^    fun! s:HL(grp, ptn) "{{{$/;"	f
HLinit	plugin/xpt.plugin.highlight.vim	/^    fun! s:HLinit() "{{{$/;"	f
HandleAction	autoload/xpt/phfilter.vim	/^fun! s:HandleAction( fctx, flt ) "{{{$/;"	f
HandleAction	plugin/xptemplate.vim	/^fun! s:HandleAction( renderContext, filter ) "{{{$/;"	f
HandleDefaultValueAction	plugin/xptemplate.vim	/^fun! s:HandleDefaultValueAction( ctx, filter ) "{{{$/;"	f
HandleDefaultValueAction	plugin/xptemplate.vim	/^fun! s:HandleDefaultValueAction( filter ) "{{{$/;"	f
HandleOntypeAction	plugin/xptemplate.vim	/^fun! s:HandleOntypeAction( renderContext, filter ) "{{{$/;"	f
HandleOntypeFilter	plugin/xptemplate.vim	/^fun! s:HandleOntypeFilter( filter ) "{{{$/;"	f
HandleXSETcommand	autoload/xpt/parser.vim	/^fun! s:HandleXSETcommand( setting, command, cmdArgs ) "{{{$/;"	f
IfSnippetShow	plugin/xptemplate.vim	/^fun! s:IfSnippetShow( snipObj, synNames ) "{{{$/;"	f
IfSnippetShow	plugin/xptemplate.vim	/^fun! s:IfSnippetShow( snipObject, synNames ) "{{{$/;"	f
Info	autoload/xpt/debug.vim	/^fun! s:Info(...) dict "{{{$/;"	f
Info	plugin/debug.vim	/^fun! s:Info(...) dict "{{{$/;"	f
Init	xptsnippets/ftplugin/_common/inlineComplete.xpt.vim	/^fun! s:Init()$/;"	f
InitBuf	plugin/xpmark.vim	/^fun! s:InitBuf() "{{{$/;"	f
InitBuffer	plugin/xpreplace.vim	/^fun! s:InitBuffer() "{{{$/;"	f
InitItem	plugin/xptemplate.vim	/^fun! s:InitItem() " {{{$/;"	f
InitItemMapping	plugin/xptemplate.vim	/^fun! s:InitItemMapping() "{{{$/;"	f
InitItemOrderList	plugin/xptemplate.vim	/^fun! s:InitItemOrderList( setting ) "{{{$/;"	f
InitItemTempMapping	plugin/xptemplate.vim	/^fun! s:InitItemTempMapping() "{{{$/;"	f
InitRenderContext	plugin/xptemplate.vim	/^fun! s:InitRenderContext( ftScope, tmplName ) "{{{$/;"	f
InitSnipObject	plugin/xptemplate.vim	/^fun! s:InitSnipObject( xptObj, tmplObj ) "{{{$/;"	f
InitTemplateObject	plugin/xptemplate.vim	/^fun! s:InitTemplateObject( xptObj, tmplObj ) "{{{$/;"	f
IsUpdateCondition	plugin/xptemplate.vim	/^fun! s:IsUpdateCondition( renderContext ) "{{{$/;"	f
ItemPumCB.onOneMatch	plugin/xptemplate.vim	/^fun! s:ItemPumCB.onOneMatch( sess ) "{{{$/;"	f
KeyPopup	plugin/xpopup.vim	/^fun! s:KeyPopup( doCallback, ifEnlarge ) dict "{{{$/;"	f
LastLine	plugin/xptemplateTest.vim	/^fun! s:LastLine() "{{{$/;"	f
ListPopup	plugin/xpopup.vim	/^fun! s:ListPopup( doCallback, ifEnlarge ) dict "{{{$/;"	f
LoadSnippetFile	plugin/xptemplate.vim	/^fun! s:LoadSnippetFile( snipname ) "{{{$/;"	f
LoadSnippetFile	plugin/xptemplate.vim	/^fun! s:LoadSnippetFile(snip) "{{{$/;"	f
Log	autoload/xpt/debug.vim	/^fun! s:Log(...) dict "{{{$/;"	f
Log	plugin/debug.vim	/^fun! s:Log(...) dict "{{{$/;"	f
LogNothing	autoload/xpt/debug.vim	/^fun! s:LogNothing(...) "{{{$/;"	f
LogNothing	plugin/debug.vim	/^fun! s:LogNothing(...) "{{{$/;"	f
Log_core	autoload/xpt/debug.vim	/^fun! Log_core(level, ...) "{{{$/;"	f
Log_core	plugin/debug.vim	/^fun! Log_core(level, ...) "{{{$/;"	f
LongestPrefix	plugin/xpopup.vim	/^fun! s:LongestPrefix(sess) "{{{$/;"	f
MappingPop	autoload/xpt/msvr.vim	/^fun! s:MappingPop( info ) "{{{$/;"	f
MarkRange	plugin/xpt.plugin.highlight.vim	/^fun! s:MarkRange( marks ) "{{{$/;"	f
MergeEltsIfAllString	autoload/xpt/phfilter.vim	/^fun! s:MergeEltsIfAllString( ph ) "{{{$/;"	f
MergeSetting	plugin/xptemplate.vim	/^fun! s:MergeSetting( toSettings, fromSettings ) "{{{$/;"	f
MistakeTypeEnd	plugin/xpopup.vim	/^fun! s:MistakeTypeEnd() "{{{$/;"	f
NPreferedIndent	plugin/xptemplate.vim	/^fun! s:NPreferedIndent( startPos, endPos ) "{{{$/;"	f
NewRenderContext	plugin/xptemplate.vim	/^fun! s:NewRenderContext( ftScope, tmplName ) "{{{$/;"	f
NewTestFile	plugin/xptemplateTest.vim	/^fun! s:NewTestFile(ft) "{{{$/;"	f
NextLeftMark	plugin/xptemplate.vim	/^fun! s:NextLeftMark( markRange ) "{{{$/;"	f
PUMclear	plugin/xpopup.vim	/^fun PUMclear() "{{{$/;"	f
ParseInclusion	plugin/xptemplate.vim	/^fun! s:ParseInclusion( tmplDict, tmplObject ) "{{{$/;"	f
ParseInclusionStatement	plugin/xptemplate.vim	/^fun! s:ParseInclusionStatement( snipObject, st ) "{{{$/;"	f
ParsePostQuoter	plugin/xptemplate.vim	/^fun! s:ParsePostQuoter( setting ) "{{{$/;"	f
ParsePriority	plugin/xptemplate.vim	/^fun! s:ParsePriority( pstr ) "{{{$/;"	f
ParsePriorityString	plugin/xptemplate.vim	/^fun! s:ParsePriorityString( s ) "{{{$/;"	f
ParsePriorityString	plugin/xptemplate.vim	/^fun! s:ParsePriorityString(s) "{{{$/;"	f
ParseQuotedPostFilter	plugin/xptemplate.vim	/^fun! s:ParseQuotedPostFilter( tmplObj ) "{{{$/;"	f
ParseRepetition	plugin/xptemplate.vim	/^fun! s:ParseRepetition( snipObject ) "{{{$/;"	f
ParseSpaces	plugin/xptemplate.vim	/^fun! s:ParseSpaces( snipObject ) "{{{$/;"	f
ParseTemplateSetting	plugin/xptemplate.vim	/^fun! s:ParseTemplateSetting( tmpl ) "{{{$/;"	f
PatternOfNext	plugin/xpt.plugin.highlight.vim	/^fun! s:PatternOfNext( ctx ) "{{{$/;"	f
PopRenderContext	plugin/xptemplate.vim	/^fun! s:PopRenderContext() "{{{$/;"	f
Popup	plugin/xptemplate.vim	/^fun! s:Popup(pref, coln, opt) "{{{$/;"	f
PopupCheck	plugin/xpopup.vim	/^fun! s:PopupCheck(...) "{{{$/;"	f
PrintDebug	plugin/xpmark.vim	/^fun! PrintDebug()$/;"	f
PushBackItem	plugin/xptemplate.vim	/^fun! s:PushBackItem() "{{{$/;"	f
PushRenderContext	plugin/xptemplate.vim	/^fun! s:PushRenderContext() "{{{$/;"	f
RTP	autoload/xpt/parser.vim	/^fun! s:RTP() "{{{$/;"	f
RecordRelativePosToMark	plugin/xptemplate.vim	/^fun! s:RecordRelativePosToMark( pos, mark ) "{{{$/;"	f
RedefinePattern	plugin/xptemplate.vim	/^fun! s:RedefinePattern() "{{{$/;"	f
RemoveCurrentMarks	plugin/xptemplate.vim	/^fun! s:RemoveCurrentMarks() "{{{$/;"	f
RemoveEditMark	plugin/xptemplate.vim	/^fun! s:RemoveEditMark( ph ) "{{{$/;"	f
RenderSnippet	plugin/xptemplate.vim	/^fun! s:RenderSnippet() "{{{$/;"	f
ReplacePHInSubSnip	plugin/xptemplate.vim	/^fun! s:ReplacePHInSubSnip( snipObject, subSnipObject, params ) "{{{$/;"	f
Replace_gp	plugin/xpreplace.vim	/^fun! s:Replace_gp( start, end, replacement ) "{{{$/;"	f
Replace_standard	plugin/xpreplace.vim	/^fun! s:Replace_standard( start, end, replacement ) "{{{$/;"	f
RestoreCommpletefunc	autoload/XPpum.vim	/^fun! s:RestoreCommpletefunc() "{{{$/;"	f
RestoreCursorAfterAction	plugin/xptemplate.vim	/^fun! s:RestoreCursorAfterAction( filter ) "{{{$/;"	f
RubyAssertPopupSort	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^fun! s:RubyAssertPopupSort(a, b) "{{{$/;"	f
SaveCursorBeforeAction	plugin/xptemplate.vim	/^fun! s:SaveCursorBeforeAction( filter ) "{{{$/;"	f
SaveNavKey	plugin/xptemplate.vim	/^fun! s:SaveNavKey() "{{{$/;"	f
SelectCurrent	plugin/xptemplate.vim	/^fun! s:SelectCurrent() "{{{$/;"	f
SetAcceptEmpty	plugin/xpopup.vim	/^fun! s:SetAcceptEmpty( acc ) dict "{{{$/;"	f
SetDefaultFilters	plugin/xptemplate.vim	/^fun! s:SetDefaultFilters( ph ) "{{{$/;"	f
SetIfNotExist	plugin/xpopup.vim	/^fun! s:SetIfNotExist(k, v) "{{{$/;"	f
SetMatchWholeName	plugin/xpopup.vim	/^fun! s:SetMatchWholeName( mwn ) dict "{{{$/;"	f
SetOption	plugin/xpopup.vim	/^fun! s:SetOption( opt ) dict "{{{$/;"	f
SetPreValue	plugin/xptemplate.vim	/^fun! s:SetPreValue( placeHolder, filter ) "{{{$/;"	f
SetTriggerKey	plugin/xpopup.vim	/^fun! s:SetTriggerKey( key ) dict "{{{$/;"	f
SetupStatusline	plugin/xpmark.vim	/^fun! s:SetupStatusline() "{{{$/;"	f
ShiftBackward	plugin/xptemplate.vim	/^fun! s:ShiftBackward() "{{{$/;"	f
ShiftForward	plugin/xptemplate.vim	/^fun! s:ShiftForward( action ) " {{{$/;"	f
SnipForReplacePHs	autoload/xpt/test/phfilter.vim	/^fun! s:SnipForReplacePHs() "{{{$/;"	f
SplitLines	autoload/xpt/snip.vim	/^fun! s:SplitLines( so ) "{{{$/;"	f
SplitWith	autoload/xpt/parser.vim	/^fun! s:SplitWith( str, char ) "{{{$/;"	f
StartNewTemplate	plugin/xptemplateTest.vim	/^fun! s:StartNewTemplate() "{{{$/;"	f
String	autoload/xpt/msvr.vim	/^fun! s:String( stack ) "{{{$/;"	f
SynNameStack	plugin/xptemplate.vim	/^fun! s:SynNameStack(l, c) "{{{$/;"	f
Test	plugin/xptTestKey.vim	/^fun! s:Test( inputs, expect, hasPum, msg ) "{{{$/;"	f
TestFinish	plugin/xptemplateTest.vim	/^fun! s:TestFinish() "{{{$/;"	f
TestProcess	plugin/xptemplateTest.vim	/^fun! TestProcess(...) "{{{$/;"	f
TextBetween	plugin/xptemplate.vim	/^fun! s:TextBetween( posList ) "{{{$/;"	f
TextBetween	plugin/xptemplateTest.vim	/^fun! s:TextBetween( posList ) "{{{$/;"	f
ToChangeNr	plugin/xpmark.vim	/^fun! s:ToChangeNr( nr ) dict "{{{$/;"	f
UpdateFollowingPlaceHoldersWith	plugin/xptemplate.vim	/^fun! s:UpdateFollowingPlaceHoldersWith( contentTyped, option ) "{{{$/;"	f
UpdateHL	plugin/xpt.plugin.highlight.vim	/^fun! s:UpdateHL(x, ctx) "{{{$/;"	f
UpdateIndex	plugin/xpopup.vim	/^fun! s:UpdateIndex(map, key) "{{{$/;"	f
UpdateMarksAccordingToLeaderChanges	plugin/xptemplate.vim	/^fun! s:UpdateMarksAccordingToLeaderChanges( renderContext ) "{{{$/;"	f
UpdateNamePrefixDict	plugin/xptemplate.vim	/^fun! s:UpdateNamePrefixDict( ftScope, name ) "{{{$/;"	f
Warn	autoload/xpt/debug.vim	/^fun! s:Warn(...) dict "{{{$/;"	f
Warn	plugin/debug.vim	/^fun! s:Warn(...) dict "{{{$/;"	f
XPM	plugin/xpmark.vim	/^augroup XPM$/;"	a
XPMadd	plugin/xpmark.vim	/^fun! XPMadd( name, pos, prefer, ... ) "{{{$/;"	f
XPMaddSeq	plugin/xpmark.vim	/^fun! XPMaddSeq( markArgs ) "{{{$/;"	f
XPMaddSeqSimple	plugin/xpmark.vim	/^fun! XPMaddSeqSimple( markArgs ) "{{{$/;"	f
XPMallMark	plugin/xpmark.vim	/^fun! XPMallMark() "{{{$/;"	f
XPMautoUpdate	plugin/xpmark.vim	/^fun! XPMautoUpdate(msg) "{{{$/;"	f
XPMcheckStatusline	plugin/xpmark.vim	/^fun! XPMcheckStatusline() "{{{$/;"	f
XPMflush	plugin/xpmark.vim	/^fun! XPMflush() "{{{$/;"	f
XPMflushWithHistory	plugin/xpmark.vim	/^fun! XPMflushWithHistory() "{{{$/;"	f
XPMgoto	plugin/xpmark.vim	/^fun! XPMgoto( name ) "{{{$/;"	f
XPMhas	plugin/xpmark.vim	/^fun! XPMhas( ... ) "{{{$/;"	f
XPMhere	plugin/xpmark.vim	/^fun! XPMhere( name, prefer ) "{{{$/;"	f
XPMmarkAfter	plugin/xpmark.vim	/^fun! XPMmarkAfter( pos ) "{{{$/;"	f
XPMpos	plugin/xpmark.vim	/^fun! XPMpos( name ) "{{{$/;"	f
XPMposList	plugin/xpmark.vim	/^fun! XPMposList( ... ) "{{{$/;"	f
XPMposStartEnd	plugin/xpmark.vim	/^fun! XPMposStartEnd( dict ) "{{{$/;"	f
XPMremove	plugin/xpmark.vim	/^fun! XPMremove( name ) "{{{$/;"	f
XPMremoveMarkStartWith	plugin/xpmark.vim	/^fun! XPMremoveMarkStartWith(prefix) "{{{$/;"	f
XPMremoveStartEnd	plugin/xpmark.vim	/^fun! XPMremoveStartEnd( dict ) "{{{$/;"	f
XPMsetBufSortFunction	plugin/xpmark.vim	/^fun! XPMsetBufSortFunction( funcRef ) "{{{$/;"	f
XPMsetLikelyBetween	plugin/xpmark.vim	/^fun! XPMsetLikelyBetween( start, end ) "{{{$/;"	f
XPMsetUpdateStrategy	plugin/xpmark.vim	/^fun! XPMsetUpdateStrategy( mode ) "{{{$/;"	f
XPMupdate	plugin/xpmark.vim	/^fun! XPMupdate(...) " {{{$/;"	f
XPMupdateCursorStat	plugin/xpmark.vim	/^fun! XPMupdateCursorStat(...) "{{{$/;"	f
XPMupdateSpecificChangedRange	plugin/xpmark.vim	/^fun! XPMupdateSpecificChangedRange(start, end) " {{{$/;"	f
XPMupdateStat	plugin/xpmark.vim	/^fun! XPMupdateStat() "{{{$/;"	f
XPMupdateWithMarkRangeChanging	plugin/xpmark.vim	/^fun! XPMupdateWithMarkRangeChanging( startMark, endMark, changeStart, changeEnd ) "{{{$/;"	f
XPPaccept	plugin/xpopup.vim	/^fun! XPPaccept() "{{{$/;"	f
XPPcallback	plugin/xpopup.vim	/^fun! XPPcallback() "{{{$/;"	f
XPPcancel	plugin/xpopup.vim	/^fun! XPPcancel( key ) "{{{$/;"	f
XPPcomplete	plugin/xpopup.vim	/^fun! XPPcomplete(col, list) "{{{$/;"	f
XPPcorrectPos	plugin/xpopup.vim	/^fun! XPPcorrectPos() "{{{$/;"	f
XPPcr	plugin/xpopup.vim	/^fun! XPPcr() "{{{$/;"	f
XPPdown	plugin/xpopup.vim	/^fun! XPPdown( key ) "{{{$/;"	f
XPPend	plugin/xpopup.vim	/^fun! XPPend() "{{{$/;"	f
XPPenlarge	plugin/xpopup.vim	/^fun! XPPenlarge( key ) "{{{$/;"	f
XPPhasSession	plugin/xpopup.vim	/^fun! XPPhasSession() "{{{$/;"	f
XPPopupNew	plugin/xpopup.vim	/^fun! XPPopupNew( callback, data, ... ) "{{{$/;"	f
XPPprocess	plugin/xpopup.vim	/^fun! XPPprocess( list ) "{{{$/;"	f
XPPrepopup	plugin/xpopup.vim	/^fun! XPPrepopup( doCallback, ifEnlarge ) "{{{$/;"	f
XPPshorten	plugin/xpopup.vim	/^fun! XPPshorten() "{{{$/;"	f
XPPup	plugin/xpopup.vim	/^fun! XPPup( key ) "{{{$/;"	f
XPRaddPostJob	plugin/xpreplace.vim	/^fun! XPRaddPostJob( functionName ) "{{{$/;"	f
XPRaddPreJob	plugin/xpreplace.vim	/^fun! XPRaddPreJob( functionName ) "{{{$/;"	f
XPRendSession	plugin/xpreplace.vim	/^fun! XPRendSession() "{{{$/;"	f
XPRremovePostJob	plugin/xpreplace.vim	/^fun! XPRremovePostJob( functionName ) "{{{$/;"	f
XPRremovePreJob	plugin/xpreplace.vim	/^fun! XPRremovePreJob( functionName ) "{{{$/;"	f
XPRstartSession	plugin/xpreplace.vim	/^fun! XPRstartSession() "{{{$/;"	f
XPT	plugin/xptemplate.vim	/^augroup XPT "{{{$/;"	a
XPT#AGAIN	autoload/XPT.vim	/^let XPT#AGAIN  = 0x400$/;"	v
XPT#Assert	autoload/XPT.vim	/^fun! XPT#Assert( toBeTrue, msg ) "{{{$/;"	f
XPT#AssertEq	autoload/XPT.vim	/^fun! XPT#AssertEq( a, b, msg ) "{{{$/;"	f
XPT#BROKEN	autoload/XPT.vim	/^let XPT#BROKEN = -1$/;"	v
XPT#BUILT	autoload/XPT.vim	/^let XPT#BUILT = 0x001$/;"	v
XPT#DONE	autoload/XPT.vim	/^let XPT#DONE   = 0x100$/;"	v
XPT#GOON	autoload/XPT.vim	/^let XPT#GOON   = 0x300$/;"	v
XPT#NOTBUILT	autoload/XPT.vim	/^let XPT#NOTBUILT = 0x002$/;"	v
XPT#Strlen	autoload/XPT.vim	/^fun! XPT#Strlen( s ) "{{{$/;"	f
XPT#UNDONE	autoload/XPT.vim	/^let XPT#UNDONE = 0x200$/;"	v
XPT#default	autoload/XPT.vim	/^fun! XPT#default(k, v) "{{{$/;"	f
XPT#error	autoload/XPT.vim	/^fun! XPT#error( msg ) "{{{$/;"	f
XPT#escapeHead	autoload/XPT.vim	/^let XPT#escapeHead   = '\\v(\\\\*)\\V'$/;"	v
XPT#importConst	autoload/XPT.vim	/^let XPT#importConst = ''$/;"	v
XPT#info	autoload/XPT.vim	/^fun! XPT#info( msg ) "{{{$/;"	f
XPT#item_func	autoload/XPT.vim	/^let XPT#item_func  = '\\V' . '\\w\\+(\\.\\*)'$/;"	v
XPT#item_qfunc	autoload/XPT.vim	/^let XPT#item_qfunc = '\\V' . '{\\w\\+(\\.\\*)}'$/;"	v
XPT#item_qvar	autoload/XPT.vim	/^let XPT#item_qvar  = '\\V' . '{$\\w\\+}'$/;"	v
XPT#item_var	autoload/XPT.vim	/^let XPT#item_var   = '\\V' . '$\\w\\+'$/;"	v
XPT#let_sid	autoload/XPT.vim	/^let XPT#let_sid = 'map <Plug>xsid <SID>|let s:sid=matchstr(maparg("<Plug>xsid"), "\\\\d\\\\+_")|unmap <Plug>xsid'$/;"	v
XPT#nonEscaped	autoload/XPT.vim	/^let XPT#nonEscaped =$/;"	v
XPT#nonsafe	autoload/XPT.vim	/^let XPT#nonsafe     = '{$( '$/;"	v
XPT#nonsafeHint	autoload/XPT.vim	/^let XPT#nonsafeHint = '$('$/;"	v
XPT#nullDict	autoload/XPT.vim	/^let XPT#nullDict = {}$/;"	v
XPT#nullList	autoload/XPT.vim	/^let XPT#nullList = []$/;"	v
XPT#priorities	autoload/XPT.vim	/^let XPT#priorities = {'all' : 192, 'spec' : 160, 'like' : 128, 'lang' : 96, 'sub' : 64, 'personal' : 32}$/;"	v
XPT#ptnIncFull	autoload/XPT.vim	/^let XPT#ptnIncFull = '\\V' . '\\^Include:' . '\\zs' . '\\(\\.\\{-}\\)\\$'$/;"	v
XPT#ptnIncSimp	autoload/XPT.vim	/^let XPT#ptnIncSimp = '\\V' . '\\^:' . '\\zs' . '\\(\\.\\{-}\\)' . '\\ze' . ':\\$'$/;"	v
XPT#ptnPreEvalFunc	autoload/XPT.vim	/^let XPT#ptnPreEvalFunc = '\\v^%(Inc|Inline|ResetIndent|Pre)\\('$/;"	v
XPT#ptnRepetition	autoload/XPT.vim	/^let XPT#ptnRepetition = '\\V'. '\\^\\w\\*...\\w\\*\\$'$/;"	v
XPT#regEval	autoload/XPT.vim	/^let XPT#regEval     = '\\V\\w(\\|$\\w'$/;"	v
XPT#skipPattern	autoload/XPT.vim	/^let XPT#skipPattern = 'synIDattr(synID(line("."), col("."), 0), "name") =~? "\\\\vstring|comment"'$/;"	v
XPT#unescapeHead	autoload/XPT.vim	/^let XPT#unescapeHead = '\\v(\\\\*)\\1\\\\?\\V'$/;"	v
XPT#ver	autoload/XPT.vim	/^let XPT#ver = 3$/;"	v
XPT#warn	autoload/XPT.vim	/^fun! XPT#warn( msg ) "{{{$/;"	f
XPTCR	plugin/xptemplate.vim	/^fun! s:XPTCR() "{{{$/;"	f
XPTDoSnippetFileInit	autoload/xpt/parser.vim	/^fun! XPTDoSnippetFileInit( filename, ... ) "{{{$/;"	f
XPTSlow	plugin/xptemplateTest.vim	/^com! XPTSlow echo$/;"	c
XPT_erubyFiletypeDetect	xptsnippets/ftplugin/eruby/eruby.ftdetect.vim	/^fun! XPT_erubyFiletypeDetect() "{{{$/;"	f
XPT_htmlFiletypeDetect	xptsnippets/ftplugin/html/html.ftdetect.vim	/^fun! XPT_htmlFiletypeDetect() "{{{$/;"	f
XPT_htmldjangoFiletypeDetect	xptsnippets/ftplugin/htmldjango/htmldjango.ftdetect.vim	/^fun! XPT_htmldjangoFiletypeDetect() "{{{$/;"	f
XPT_phpFiletypeDetect	xptsnippets/ftplugin/php/php.ftdetect.vim	/^fun! XPT_phpFiletypeDetect() "{{{$/;"	f
XPTabbr	plugin/xptemplate.vim	/^fun! XPTabbr( name ) "{{{$/;"	f
XPTaddBundle	plugin/xptemplate.conf.vim	/^fun! g:XPTaddBundle(ft, bundle) "{{{$/;"	f
XPTaddPlugin	plugin/xptemplate.vim	/^fun! g:XPTaddPlugin(event, when, func) "{{{$/;"	f
XPTapplyTemplateSettingDefaultValue	plugin/xptemplate.vim	/^fun! g:XPTapplyTemplateSettingDefaultValue( setting ) "{{{$/;"	f
XPTassertLine	plugin/xptTestKey.vim	/^fun! XPTassertLine( l, msg ) "{{{$/;"	f
XPTassertPum	plugin/xptTestKey.vim	/^fun! XPTassertPum( hasPum, msg ) "{{{$/;"	f
XPTbufData	plugin/xptemplate.vim	/^fun! XPTbufData() "{{{$/;"	f
XPTbufferInit	plugin/xptemplate.vim	/^fun! s:XPTbufferInit() "{{{$/;"	f
XPTcancel	plugin/xptemplateTest.vim	/^fun! s:XPTcancel(...) "{{{$/;"	f
XPTcheck	plugin/xptemplate.vim	/^fun! s:XPTcheck() "{{{$/;"	f
XPTchoosePum	plugin/xptemplateTest.vim	/^fun! s:XPTchoosePum( ... ) "{{{$/;"	f
XPTcrash	plugin/xptemplate.vim	/^com! XPTcrash call <SID>Crash()$/;"	c
XPTdefaultFtDetector	plugin/xptemplate.vim	/^fun! XPTdefaultFtDetector() "{{{$/;"	f
XPTdefineSnippet	plugin/xptemplate.vim	/^fun! XPTdefineSnippet( name, setting, snip ) "{{{$/;"	f
XPTdefineSnippetInternal	plugin/xptemplate.vim	/^fun! XPTdefineSnippetInternal( name, setting, snip ) "{{{$/;"	f
XPTembed	plugin/xptemplate.parser.vim	/^com! -nargs=+ XPTembed      call xpt#parser#Embed(<f-args>)$/;"	c
XPTemplate	plugin/xptemplate.parser.vim	/^com! -nargs=* XPTemplate$/;"	c
XPTemplate	plugin/xptemplate.vim	/^fun! XPTemplate(name, str_or_ctx, ...) " {{{$/;"	f
XPTemplateAlias	plugin/xptemplate.vim	/^fun! XPTemplateAlias( name, toWhich, setting ) "{{{$/;"	f
XPTemplateDef	plugin/xptemplate.parser.vim	/^com! -nargs=* XPTemplateDef echom expand("<sfile>") . " XPTemplateDef is NOT needed any more. Remove it."$/;"	c
XPTemplateDoWrap	plugin/xptemplate.vim	/^fun! XPTemplateDoWrap() "{{{$/;"	f
XPTemplateInit	plugin/xptemplate.vim	/^fun! XPTemplateInit() "{{{$/;"	f
XPTemplateKeyword	plugin/xptemplate.vim	/^fun! XPTemplateKeyword( val ) "{{{$/;"	f
XPTemplateKeyword	plugin/xptemplate.vim	/^fun! XPTemplateKeyword(val) "{{{$/;"	f
XPTemplateMark	plugin/xptemplate.vim	/^fun! XPTemplateMark(sl, sr) "{{{$/;"	f
XPTemplatePreWrap	plugin/xptemplate.vim	/^fun! XPTemplatePreWrap( wrap ) "{{{$/;"	f
XPTemplatePriority	plugin/xptemplate.vim	/^fun! XPTemplatePriority(...) "{{{$/;"	f
XPTemplateStart	plugin/xptemplate.vim	/^fun! XPTemplateStart(pos_unused_any_more, ...) " {{{$/;"	f
XPTemplateTrigger	plugin/xptemplate.vim	/^fun! XPTemplateTrigger( snippetName, ... ) "{{{$/;"	f
XPTfiletypeInit	plugin/xptemplate.conf.vim	/^fun! XPTfiletypeInit() "{{{$/;"	f
XPTforceForward	plugin/xptemplate.vim	/^fun! XPTforceForward( action ) "{{{$/;"	f
XPTftInit	plugin/xptemplate.conf.vim	/^augroup XPTftInit$/;"	a
XPTfuncs	plugin/xptemplate.vim	/^fun! g:XPTfuncs() "{{{$/;"	f
XPTgetAllTemplates	plugin/xptemplate.vim	/^fun! XPTgetAllTemplates() "{{{$/;"	f
XPTgetStaticRange	plugin/xpt.plugin.highlight.vim	/^fun! XPTgetStaticRange(p, q) "{{{$/;"	f
XPTinclude	plugin/xptemplate.parser.vim	/^com! -nargs=+ XPTinclude    call xpt#parser#Include(<f-args>)$/;"	c
XPTinfo	plugin/xptemplate.conf.vim	/^fun! XPTinfo() "{{{$/;"	f
XPTinfoStr	plugin/xptemplate.conf.vim	/^fun! XPTinfoStr( ... ) "{{{$/;"	f
XPTinitMapping	plugin/xptemplate.vim	/^fun! s:XPTinitMapping() "{{{$/;"	f
XPTloadBundle	plugin/xptemplate.conf.vim	/^fun! g:XPTloadBundle(ft, bundle) "{{{$/;"	f
XPTmapKey	plugin/xptemplate.vim	/^fun! XPTmapKey( left, right ) "{{{$/;"	f
XPTmappingEval	plugin/xptemplate.vim	/^fun! XPTmappingEval( str ) "{{{$/;"	f
XPTmark	plugin/xptemplate.vim	/^fun! XPTmark() "{{{$/;"	f
XPTmarkCompare	plugin/xptemplate.vim	/^fun! XPTmarkCompare( o, markToAdd, existedMark ) "{{{$/;"	f
XPTnew	plugin/xptemplateTest.vim	/^fun! s:XPTnew(name, preinput) "{{{$/;"	f
XPTnewSnipScope	plugin/xptemplate.vim	/^fun! XPTnewSnipScope( filename )$/;"	f
XPTparseSnippets	plugin/xptemplate.vim	/^fun! XPTparseSnippets() "{{{$/;"	f
XPTreload	plugin/xptemplate.vim	/^com! XPTreload call XPTreload()$/;"	c
XPTreload	plugin/xptemplate.vim	/^fun! XPTreload() "{{{$/;"	f
XPTsnipScope	plugin/xptemplate.vim	/^fun! XPTsnipScope()$/;"	f
XPTsnipScopePop	plugin/xptemplate.vim	/^fun! XPTsnipScopePop()$/;"	f
XPTsnipScopePush	plugin/xptemplate.vim	/^fun! XPTsnipScopePush()$/;"	f
XPTsnipSet	plugin/xptemplate.parser.vim	/^com! -nargs=* XPTsnipSet    call xpt#parser#SnipSet( <q-args> )$/;"	c
XPTtest	plugin/xptemplateTest.vim	/^com -nargs=1 XPTtest call <SID>XPTtest(<f-args>)$/;"	c
XPTtest	plugin/xptemplateTest.vim	/^fun! s:XPTtest( ftype ) "{{{$/;"	f
XPTtestAll	plugin/xptemplateTest.vim	/^com -nargs=+ XPTtestAll call <SID>XPTtestAll(<q-args>)$/;"	c
XPTtestAll	plugin/xptemplateTest.vim	/^fun! s:XPTtestAll( fts ) "{{{$/;"	f
XPTtestEnd	plugin/xptemplateTest.vim	/^com XPTtestEnd call <SID>TestFinish()$/;"	c
XPTtestKey	plugin/xptTestKey.vim	/^fun! XPTtestKey() "{{{$/;"	f
XPTtestKeyEnd	plugin/xptTestKey.vim	/^fun! s:XPTtestKeyEnd() "{{{$/;"	f
XPTtestKeyGo	plugin/xptTestKey.vim	/^fun! XPTtestKeyGo() "{{{$/;"	f
XPTtestPseudoDate	plugin/xptemplateTest.vim	/^fun! XPTtestPseudoDate(...) "{{{$/;"	f
XPTtestSort	plugin/xptemplateTest.vim	/^fun! XPTtestSort(a, b) "{{{$/;"	f
XPTtgr	plugin/xptemplate.vim	/^fun! XPTtgr( snippetName, ... ) "{{{$/;"	f
XPTtrigger	plugin/xptemplateTest.vim	/^fun! s:XPTtrigger(name) "{{{$/;"	f
XPTtype	plugin/xptemplateTest.vim	/^fun! s:XPTtype(...) "{{{$/;"	f
XPTupdate	plugin/xptemplate.vim	/^fun! s:XPTupdate() "{{{$/;"	f
XPTupdateTyping	plugin/xptemplate.vim	/^fun! s:XPTupdateTyping() "{{{$/;"	f
XPTvar	plugin/xptemplate.parser.vim	/^com! -nargs=* XPTvar        call xpt#parser#SetVar( <q-args> )$/;"	c
XPTvisual	plugin/xptemplate.vim	/^fun! s:XPTvisual() "{{{$/;"	f
XPTwrapNew	plugin/xptemplateTest.vim	/^fun! s:XPTwrapNew(name, preinput) "{{{$/;"	f
XPpum#complete	autoload/XPpum.vim	/^fun! XPpum#complete( col, list, onShow ) "{{{$/;"	f
XPpum#completeFunc	autoload/XPpum.vim	/^fun! XPpum#completeFunc( first, base )$/;"	f
XPreplace	plugin/xpreplace.vim	/^fun! XPreplace(start, end, replacement, ...) "{{{$/;"	f
XPreplaceByMarkInternal	plugin/xpreplace.vim	/^fun! XPreplaceByMarkInternal( startMark, endMark, replacement ) "{{{$/;"	f
XPreplaceInternal	plugin/xpreplace.vim	/^fun! XPreplaceInternal(start, end, replacement, ...) "{{{$/;"	f
[	plugin/xptemplate.conf.vim	/^    inoremap <silent> [ <C-v><C-v><BS><C-r>=XPTtgr('[',{'noliteral':1,'k':'['})<cr>$/;"	m
_GetAlighWidth	autoload/xpt/msvr.vim	/^fun! s:_GetAlighWidth() "{{{$/;"	f
_InitBuffer	plugin/xpopup.vim	/^fun! s:_InitBuffer() "{{{$/;"	f
`:expr:^	xptsnippets/ftplugin/javascript/jquery.xpt.vim	/^not`:expr:^$/;"	m
`:maybeFunction:^	xptsnippets/ftplugin/javascript/jquery.xpt.vim	/^map`:maybeFunction:^$/;"	m
`mod^`	xptsnippets/ftplugin/python/python.xpt.vim	/^import `mod^` as `name?^$/;"	m
addMarkOrder	plugin/xpmark.vim	/^fun! s:addMarkOrder( name, beforeWhich, ... ) dict "{{{$/;"	f
compact	xpt.ex	/^compact() {$/;"	f
compare	plugin/xpmark.vim	/^fun! s:compare( a, b ) dict "{{{$/;"	f
create_tgz	xpt.ex	/^create_tgz() {$/;"	f
defaultCompare	plugin/xpmark.vim	/^fun! s:defaultCompare(d, markA, markB) "{{{$/;"	f
doPostJob	plugin/xpreplace.vim	/^fun! s:doPostJob( start, end, replacement ) "{{{$/;"	f
doPreJob	plugin/xpreplace.vim	/^fun! s:doPreJob( start, end, replacement ) "{{{$/;"	f
dodist	xpt.ex	/^dodist () {$/;"	f
f.AutoCmpl	autoload/xpt/snipfunc.vim	/^fun! s:f.AutoCmpl( keepInPost, list, ... ) "{{{$/;"	f
f.BracketRightPart	xptsnippets/ftplugin/_common/common.bracketcmpl.xpt.vim	/^fun! s:f.BracketRightPart( leftReg )$/;"	f
f.Build	autoload/xpt/snipfunc.vim	/^fun! s:f.Build( ... ) "{{{$/;"	f
f.BuildIfChanged	autoload/xpt/snipfunc.vim	/^fun! s:f.BuildIfChanged( ... ) "{{{$/;"	f
f.BuildIfNoChange	autoload/xpt/snipfunc.vim	/^fun! s:f.BuildIfNoChange( ... ) "{{{$/;"	f
f.BuildRef	xptsnippets/ftplugin/markdown/markdown.xpt.vim	/^fun! s:f.BuildRef()$/;"	f
f.Choose	autoload/xpt/snipfunc.vim	/^fun! s:f.Choose( lst, ... ) "{{{$/;"	f
f.ChooseStr	autoload/xpt/snipfunc.vim	/^fun! s:f.ChooseStr(...) "{{{$/;"	f
f.CmplQuoter_pre	autoload/xpt/snipfunc.vim	/^fun! s:f.CmplQuoter_pre() dict "{{{$/;"	f
f.Cnt	xptsnippets/ftplugin/_common/cmn.counter.xpt.vim	/^fun! s:f.Cnt(name) "{{{$/;"	f
f.CntD	xptsnippets/ftplugin/_common/cmn.counter.xpt.vim	/^fun! s:f.CntD() "{{{$/;"	f
f.CntIncr	xptsnippets/ftplugin/_common/cmn.counter.xpt.vim	/^fun! s:f.CntIncr(name, ...)"{{{$/;"	f
f.CntStart	xptsnippets/ftplugin/_common/cmn.counter.xpt.vim	/^fun! s:f.CntStart(name, ...) "{{{$/;"	f
f.Commentize	autoload/xpt/snipfunc.vim	/^fun! s:f.Commentize( text ) "{{{$/;"	f
f.Complete	autoload/xpt/snipfunc.vim	/^fun! s:f.Complete( key, ... ) "{{{$/;"	f
f.CompleteRightPart	xptsnippets/ftplugin/_common/inlineComplete.xpt.vim	/^fun! s:f.CompleteRightPart( leftReg ) dict$/;"	f
f.Context	autoload/xpt/snipfunc.vim	/^fun! s:f.Context() "{{{$/;"	f
f.E	autoload/xpt/snipfunc.vim	/^fun! s:f.E(s) "{{{$/;"	f
f.Echo	autoload/xpt/snipfunc.vim	/^fun! s:f.Echo( ... ) "{{{$/;"	f
f.EchoIf	autoload/xpt/snipfunc.vim	/^fun! s:f.EchoIf( isTrue, ... ) "{{{$/;"	f
f.EchoIfEq	autoload/xpt/snipfunc.vim	/^fun! s:f.EchoIfEq( expected, ... ) "{{{$/;"	f
f.EchoIfNoChange	autoload/xpt/snipfunc.vim	/^fun! s:f.EchoIfNoChange( ... ) "{{{$/;"	f
f.Embed	autoload/xpt/snipfunc.vim	/^fun! s:f.Embed( snippetText ) "{{{$/;"	f
f.EmbedPHs	autoload/xpt/snipfunc.vim	/^fun! s:f.EmbedPHs( phsID ) "{{{$/;"	f
f.EmbedWrappedText	autoload/xpt/snipfunc.vim	/^fun! s:f.EmbedWrappedText() "{{{$/;"	f
f.Empty	autoload/xpt/snipfunc.vim	/^fun! s:f.Empty() "{{{$/;"	f
f.ExpPathPumFrom	xptsnippets/ftplugin/_common/common.path.xpt.vim	/^fun! s:f.ExpPathPumFrom( base )$/;"	f
f.ExpandIfNotEmpty	autoload/xpt/snipfunc.vim	/^fun! s:f.ExpandIfNotEmpty( sep, item, ... ) "{{{$/;"	f
f.ExpandInsideEdge	autoload/xpt/snipfunc.vim	/^fun! s:f.ExpandInsideEdge( newLeftEdge, newRightEdge ) "{{{$/;"	f
f.ExpandMarkdownSubSection	xptsnippets/ftplugin/markdown/markdown.xpt.vim	/^fun! s:f.ExpandMarkdownSubSection()$/;"	f
f.ExpandMarkdownTitle	xptsnippets/ftplugin/markdown/markdown.xpt.vim	/^fun! s:f.ExpandMarkdownTitle( char )$/;"	f
f.ExpandRstSection	xptsnippets/ftplugin/rst/rst.xpt.vim	/^fun! s:f.ExpandRstSection( char )$/;"	f
f.ExpandRstTitle	xptsnippets/ftplugin/rst/rst.xpt.vim	/^fun! s:f.ExpandRstTitle()$/;"	f
f.Finish	autoload/xpt/snipfunc.vim	/^fun! s:f.Finish(...) "{{{$/;"	f
f.FinishOuter	autoload/xpt/snipfunc.vim	/^fun! s:f.FinishOuter( ... ) "{{{$/;"	f
f.FinishPH	autoload/xpt/snipfunc.vim	/^fun! s:f.FinishPH( opt ) "{{{$/;"	f
f.GetDefaultImplementation	xptsnippets/ftplugin/c/autoimplem.xpt.vim	/^fun! s:f.GetDefaultImplementation( type )$/;"	f
f.GetDict	autoload/xpt/snipfunc.vim	/^fun! s:f.GetDict( ... ) "{{{$/;"	f
f.GetImplementationFile	xptsnippets/ftplugin/c/autoimplem.xpt.vim	/^fun! s:f.GetImplementationFile() "{{{$/;"	f
f.GetLastStructClassDeclaration	xptsnippets/ftplugin/cpp/autoimplem.xpt.vim	/^fun! s:f.GetLastStructClassDeclaration() "{{{$/;"	f
f.GetVar	autoload/xpt/snipfunc.vim	/^fun! s:f.GetVar( name ) "{{{$/;"	f
f.HasStep	autoload/xpt/snipfunc.vim	/^fun! s:f.HasStep( name ) "{{{$/;"	f
f.Inc	autoload/xpt/snipfunc.vim	/^fun! s:f.Inc( targetName, keepCursor, params ) "{{{$/;"	f
f.Inline	autoload/xpt/snipfunc.vim	/^fun! s:f.Inline( snipText ) "{{{$/;"	f
f.IsChanged	autoload/xpt/snipfunc.vim	/^fun! s:f.IsChanged() "{{{$/;"	f
f.Item	autoload/xpt/snipfunc.vim	/^fun! s:f.Item() "{{{$/;"	f
f.ItemCreate	autoload/xpt/snipfunc.vim	/^fun! s:f.ItemCreate( name, edges, filters ) "{{{$/;"	f
f.ItemEdges	autoload/xpt/snipfunc.vim	/^fun! s:f.ItemEdges() "{{{$/;"	f
f.ItemFullname	autoload/xpt/snipfunc.vim	/^fun! s:f.ItemFullname() "{{{$/;"	f
f.ItemInitValue	autoload/xpt/snipfunc.vim	/^fun! s:f.ItemInitValue() "{{{$/;"	f
f.ItemInitValueWithEdge	autoload/xpt/snipfunc.vim	/^fun! s:f.ItemInitValueWithEdge() "{{{$/;"	f
f.ItemName	autoload/xpt/snipfunc.vim	/^fun! s:f.ItemName() "{{{$/;"	f
f.ItemPos	autoload/xpt/snipfunc.vim	/^fun! s:f.ItemPos() "{{{$/;"	f
f.ItemStrippedValue	autoload/xpt/snipfunc.vim	/^fun! s:f.ItemStrippedValue() "{{{$/;"	f
f.ItemValue	autoload/xpt/snipfunc.vim	/^fun! s:f.ItemValue() dict "{{{$/;"	f
f.ItemValueStripped	autoload/xpt/snipfunc.vim	/^fun! s:f.ItemValueStripped( ... ) "{{{$/;"	f
f.LowerCase	autoload/xpt/snipfunc.vim	/^fun! s:f.LowerCase( v ) "{{{$/;"	f
f.ModuleName	xptsnippets/ftplugin/factor/factor.xpt.vim	/^fun! s:f.ModuleName()$/;"	f
f.NIndent	autoload/xpt/snipfunc.vim	/^fun! s:f.NIndent() "{{{$/;"	f
f.Next	autoload/xpt/snipfunc.vim	/^fun! s:f.Next( ... ) "{{{$/;"	f
f.PHs	autoload/xpt/snipfunc.vim	/^fun! s:f.PHs( snipText ) "{{{$/;"	f
f.PathPumFrom	xptsnippets/ftplugin/_common/common.path.xpt.vim	/^fun! s:f.PathPumFrom( where )$/;"	f
f.Phase	autoload/xpt/snipfunc.vim	/^fun! s:f.Phase() dict "{{{$/;"	f
f.Pre	autoload/xpt/snipfunc.vim	/^fun! s:f.Pre( a ) "{{{$/;"	f
f.PrevItem	autoload/xpt/snipfunc.vim	/^fun! s:f.PrevItem( n ) "{{{$/;"	f
f.Reference	autoload/xpt/snipfunc.vim	/^fun! s:f.Reference(name) "{{{$/;"	f
f.Reminder	xptsnippets/ftplugin/markdown/markdown.xpt.vim	/^fun! s:f.Reminder( field )$/;"	f
f.Remove	autoload/xpt/snipfunc.vim	/^fun! s:f.Remove() "{{{$/;"	f
f.RemoveIfUnchanged	xptsnippets/ftplugin/lua/lua.xpt.vim	/^fun! s:f.RemoveIfUnchanged() "{{{$/;"	f
f.RemoveIfUnchanged	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^fun! s:f.RemoveIfUnchanged() "{{{$/;"	f
f.RepeatInsideEdges	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^fun! s:f.RepeatInsideEdges(sep) "{{{$/;"	f
f.ResetIndent	autoload/xpt/snipfunc.vim	/^fun! s:f.ResetIndent( nIndent, text ) "{{{$/;"	f
f.RubyAssertMethod	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^fun! s:f.RubyAssertMethod() "{{{$/;"	f
f.RubyAssertPopup	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^fun! s:f.RubyAssertPopup() "{{{$/;"	f
f.RubyCamelCase	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^fun! s:f.RubyCamelCase(...) "{{{$/;"	f
f.RubyEachBrace	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^fun! s:f.RubyEachBrace() "{{{$/;"	f
f.RubyEachPair	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^fun! s:f.RubyEachPair() "{{{$/;"	f
f.RubyEachPopup	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^fun! s:f.RubyEachPopup() "{{{$/;"	f
f.RubySnakeCase	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^fun! s:f.RubySnakeCase(...) "{{{$/;"	f
f.S	autoload/xpt/snipfunc.vim	/^fun! s:f.S(str, ptn, rep, ...) "{{{$/;"	f
f.SnipObject	autoload/xpt/snipfunc.vim	/^fun! s:f.SnipObject() "{{{$/;"	f
f.Snippet	autoload/xpt/snipfunc.vim	/^fun! s:f.Snippet( name ) "{{{$/;"	f
f.SubstituteWithValue	autoload/xpt/snipfunc.vim	/^fun! s:f.SubstituteWithValue(ptn, rep, ...) "{{{$/;"	f
f.Trigger	autoload/xpt/snipfunc.vim	/^fun! s:f.Trigger( name ) "{{{$/;"	f
f.UnescapeMarks	autoload/xpt/snipfunc.vim	/^fun! s:f.UnescapeMarks(string) dict "{{{$/;"	f
f.UpperCase	autoload/xpt/snipfunc.vim	/^fun! s:f.UpperCase( v ) "{{{$/;"	f
f.VMS	autoload/xpt/snipfunc.vim	/^fun! s:f.VMS( reg ) "{{{$/;"	f
f.Vmatch	autoload/xpt/snipfunc.vim	/^fun! s:f.Vmatch( ... ) "{{{$/;"	f
f.Void	autoload/xpt/snipfunc.vim	/^fun! s:f.Void(...) "{{{$/;"	f
f.VoidLine	autoload/xpt/snipfunc.vim	/^fun! s:f.VoidLine() "{{{$/;"	f
f.WrapAlignAfter	autoload/xpt/snipfunc.vim	/^fun! s:f.WrapAlignAfter( min ) "{{{$/;"	f
f.WrapAlignBefore	autoload/xpt/snipfunc.vim	/^fun! s:f.WrapAlignBefore( min ) "{{{$/;"	f
f.WriteCopyCtorToCpp	xptsnippets/ftplugin/cpp/autoimplem.xpt.vim	/^fun! s:f.WriteCopyCtorToCpp() " {{{$/;"	f
f.WriteCtorToCpp	xptsnippets/ftplugin/cpp/autoimplem.xpt.vim	/^fun! s:f.WriteCtorToCpp() " {{{$/;"	f
f.WriteDtorToCpp	xptsnippets/ftplugin/cpp/autoimplem.xpt.vim	/^fun! s:f.WriteDtorToCpp() " {{{$/;"	f
f.WriteFunToCpp	xptsnippets/ftplugin/c/autoimplem.xpt.vim	/^fun! s:f.WriteFunToCpp() " {{{$/;"	f
f.WriteMethodToCpp	xptsnippets/ftplugin/cpp/autoimplem.xpt.vim	/^fun! s:f.WriteMethodToCpp() "{{{$/;"	f
f.WriteOpOverloadToCpp	xptsnippets/ftplugin/cpp/autoimplem.xpt.vim	/^fun! s:f.WriteOpOverloadToCpp()$/;"	f
f.WriteStaticToCpp	xptsnippets/ftplugin/cpp/autoimplem.xpt.vim	/^fun! s:f.WriteStaticToCpp()$/;"	f
f._xSnipName	autoload/xpt/snipfunc.vim	/^fun! s:f._xSnipName() "{{{$/;"	f
f.bkt_cmpl	xptsnippets/ftplugin/_common/common.bracketcmpl.xpt.vim	/^fun! s:f.bkt_cmpl()$/;"	f
f.bkt_finish	xptsnippets/ftplugin/_common/common.bracketcmpl.xpt.vim	/^fun! s:f.bkt_finish( keyPressed )$/;"	f
f.bkt_init	xptsnippets/ftplugin/_common/common.bracketcmpl.xpt.vim	/^fun! s:f.bkt_init( followingChar )$/;"	f
f.bkt_ontype	xptsnippets/ftplugin/_common/common.bracketcmpl.xpt.vim	/^fun! s:f.bkt_ontype()$/;"	f
f.c_fun_body_indent	xptsnippets/ftplugin/_func/c.like.xpt.vim	/^fun! s:f.c_fun_body_indent()$/;"	f
f.c_fun_type_indent	xptsnippets/ftplugin/_func/c.like.xpt.vim	/^fun! s:f.c_fun_type_indent()$/;"	f
f.c_printf_elts	xptsnippets/ftplugin/_printf/c.like.xpt.vim	/^fun! s:f.c_printf_elts( v, sep )$/;"	f
f.cleanTempl	xptsnippets/ftplugin/cpp/cpp.xpt.vim	/^function! s:f.cleanTempl( ctx, ... )$/;"	f
f.createTable	xptsnippets/ftplugin/html/html.xpt.vim	/^fun! s:f.createTable(...) "{{{$/;"	f
f.css_braced_post	xptsnippets/ftplugin/css/css.xpt.vim	/^fun! s:f.css_braced_post()$/;"	f
f.date	autoload/xpt/snipfunc.vim	/^fun! s:f.date(...) "{{{$/;"	f
f.datetime	autoload/xpt/snipfunc.vim	/^fun! s:f.datetime(...) "{{{$/;"	f
f.fff	xptsnippets/ftplugin/xptest/xptest.xpt.vim	/^fun! s:f.fff()$/;"	f
f.file	autoload/xpt/snipfunc.vim	/^fun! s:f.file(...) "{{{$/;"	f
f.fileExt	autoload/xpt/snipfunc.vim	/^fun! s:f.fileExt(...) "{{{$/;"	f
f.fileRoot	autoload/xpt/snipfunc.vim	/^fun! s:f.fileRoot(...) "{{{$/;"	f
f.headerSymbol	autoload/xpt/snipfunc.vim	/^fun! s:f.headerSymbol(...) "{{{$/;"	f
f.html_close_tag	xptsnippets/ftplugin/html/html.xpt.vim	/^fun! s:f.html_close_tag()$/;"	f
f.html_cont_helper	xptsnippets/ftplugin/html/html.xpt.vim	/^fun! s:f.html_cont_helper()$/;"	f
f.html_cont_ontype	xptsnippets/ftplugin/html/html.xpt.vim	/^fun! s:f.html_cont_ontype()$/;"	f
f.html_doctype_list	xptsnippets/ftplugin/html/html.xpt.vim	/^fun! s:f.html_doctype_list()$/;"	f
f.html_doctype_post	xptsnippets/ftplugin/html/html.xpt.vim	/^fun! s:f.html_doctype_post(v)$/;"	f
f.html_enc	xptsnippets/ftplugin/html/html.xpt.vim	/^fun! s:f.html_enc()$/;"	f
f.html_tag_cmpl	xptsnippets/ftplugin/html/html.xpt.vim	/^fun! s:f.html_tag_cmpl()$/;"	f
f.html_tagattr_ext	xptsnippets/ftplugin/html/html.xpt.vim	/^fun! s:f.html_tagattr_ext( v ) "{{{$/;"	f
f.jquery_ajaxOptions	xptsnippets/ftplugin/javascript/jquery.xpt.vim	/^fun! s:f.jquery_ajaxOptions()$/;"	f
f.path	autoload/xpt/snipfunc.vim	/^fun! s:f.path(...) "{{{$/;"	f
f.python_find_class	xptsnippets/ftplugin/python/python.xpt.vim	/^fun! s:f.python_find_class( default )$/;"	f
f.python_find_func	xptsnippets/ftplugin/python/python.xpt.vim	/^fun! s:f.python_find_func( default )$/;"	f
f.python_genexpr_cmpl	xptsnippets/ftplugin/python/python.xpt.vim	/^fun! s:f.python_genexpr_cmpl( itemName )$/;"	f
f.python_seq_cmpl	xptsnippets/ftplugin/python/python.xpt.vim	/^fun! s:f.python_seq_cmpl()$/;"	f
f.python_sp_arg	xptsnippets/ftplugin/python/python.xpt.vim	/^fun! s:f.python_sp_arg()$/;"	f
f.python_wrap_args_if_func	xptsnippets/ftplugin/python/python.xpt.vim	/^fun! s:f.python_wrap_args_if_func( args )$/;"	f
f.quote_cmpl	xptsnippets/ftplugin/_common/common.bracketcmpl.xpt.vim	/^fun! s:f.quote_cmpl()$/;"	f
f.quote_ontype	xptsnippets/ftplugin/_common/common.bracketcmpl.xpt.vim	/^fun! s:f.quote_ontype()$/;"	f
f.sh_complete_brace	xptsnippets/ftplugin/sh/sh.xpt.vim	/^fun! s:f.sh_complete_brace()$/;"	f
f.time	autoload/xpt/snipfunc.vim	/^fun! s:f.time(...) "{{{$/;"	f
f.vim_autoload_pre	xptsnippets/ftplugin/vim/autoload.vim.xpt.vim	/^fun! s:f.vim_autoload_pre()$/;"	f
f.vim_call	xptsnippets/ftplugin/vim/vim.xpt.vim	/^fun! s:f.vim_call()$/;"	f
f.xml_att_val	xptsnippets/ftplugin/xml/xml.xpt.vim	/^fun! s:f.xml_att_val()$/;"	f
f.xml_attr_ontype	xptsnippets/ftplugin/xml/xml.xpt.vim	/^fun! s:f.xml_attr_ontype()$/;"	f
f.xml_close_tag	xptsnippets/ftplugin/xml/xml.xpt.vim	/^fun! s:f.xml_close_tag()$/;"	f
f.xml_cont_helper	xptsnippets/ftplugin/xml/xml.xpt.vim	/^fun! s:f.xml_cont_helper()$/;"	f
f.xml_cont_ontype	xptsnippets/ftplugin/xml/xml.xpt.vim	/^fun! s:f.xml_cont_ontype()$/;"	f
f.xml_create_attr_ph	xptsnippets/ftplugin/xml/xml.xpt.vim	/^fun! s:f.xml_create_attr_ph()$/;"	f
f.xml_tag_ontype	xptsnippets/ftplugin/xml/xml.xpt.vim	/^fun! s:f.xml_tag_ontype()$/;"	f
f.xptFinishItemWith	autoload/xpt/snipfunc.vim	/^fun! s:f.xptFinishItemWith(postType) dict "{{{$/;"	f
f.xptFinishTemplateWith	autoload/xpt/snipfunc.vim	/^fun! s:f.xptFinishTemplateWith(postType) dict "{{{$/;"	f
f.xpt_ftp_pum	xptsnippets/ftplugin/xpt/xpt.xpt.vim	/^fun! s:f.xpt_ftp_pum()$/;"	f
f.xpt_vim_hint_escape	xptsnippets/ftplugin/xpt/xpt.xpt.vim	/^fun! s:f.xpt_vim_hint_escape()$/;"	f
f.xpt_vim_name	xptsnippets/ftplugin/xpt/xpt.xpt.vim	/^fun! s:f.xpt_vim_name(path)$/;"	f
f.xpt_vim_path	xptsnippets/ftplugin/xpt/xpt.xpt.vim	/^fun! s:f.xpt_vim_path()$/;"	f
filterCompleteList	plugin/xpopup.vim	/^fun! s:filterCompleteList( sess ) "{{{$/;"	f
findLikelyRange	plugin/xpmark.vim	/^fun! s:findLikelyRange(changeStart, bChangeEnd) dict "{{{$/;"	f
findLikelyRange2	plugin/xpmark.vim	/^fun! s:findLikelyRange2(changeStart, bChangeEnd) dict "{{{$/;"	f
fn	plugin/xptemplate.importer.vim	/^let fn = argv(0)$/;"	v
funName	xptsnippets/ftplugin/ocaml/ocaml.xpt.vim	/^let `funName^ : `ty^ =$/;"	v
g	xptsnippets/ftplugin/vim/vim.xpt.vim	/^    let `g^:`varname^`$SPop^=`$SPop^`val^$/;"	v
g	xptsnippets/ftplugin/vim/vim.xpt.vim	/^let ``g^:``i^`$SPop^=`$SPop^``ver^$/;"	v
g	xptsnippets/ftplugin/vim/vim.xpt.vim	/^let `g^:`i^`$SPop^=`$SPop^1$/;"	v
g:EmptyFilter	autoload/xpt/flt.vim	/^let g:EmptyFilter = {}$/;"	v
g:FilterValue	plugin/xptemplate.vim	/^let g:FilterValue = {}$/;"	v
g:FilterValue	plugin/xptemplate.vim	/^let g:FilterValue.New = function( 'xpt#flt#New' )$/;"	v
g:XPM_RET	plugin/xpmark.vim	/^let g:XPM_RET = {$/;"	v
g:XPMpreferLeft	plugin/xpmark.vim	/^let g:XPMpreferLeft = 'l'$/;"	v
g:XPMpreferRight	plugin/xpmark.vim	/^let g:XPMpreferRight = 'r'$/;"	v
g:XPT_PATH	plugin/xptemplate.conf.vim	/^let g:XPT_PATH = s:path$/;"	v
g:XPT_RC	plugin/xptemplate.vim	/^let g:XPT_RC = {$/;"	v
g:XPTact	plugin/xptemplate.vim	/^let g:XPTact = {$/;"	v
g:XPTemplateSettingPrototype	plugin/xptemplate.vim	/^let g:XPTemplateSettingPrototype  = {$/;"	v
g:XPTmappings	plugin/xptemplate.conf.vim	/^    let g:XPTmappings.trigger = "<C-g>u" . g:XPTmappings.trigger$/;"	v
g:XPTmappings	plugin/xptemplate.conf.vim	/^let g:XPTmappings = {$/;"	v
g:XPTpvs	plugin/xptemplate.conf.vim	/^  let g:XPTpvs[s:key] = substitute(s:val, s:unescapeHead.'&', '\\1\\&', 'g')$/;"	v
g:XPTpvs	plugin/xptemplate.conf.vim	/^let g:XPTpvs = {}$/;"	v
g:__AL_XPT_ACT__CMN_VIM__	autoload/xpt/act/cmn.vim	/^let g:__AL_XPT_ACT__CMN_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_ACT__FILLIN_VIM__	autoload/xpt/act/fillin.vim	/^let g:__AL_XPT_ACT__FILLIN_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_EVAL_VIM__	autoload/xpt/eval.vim	/^let g:__AL_XPT_EVAL_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_FLT_VIM__	autoload/xpt/flt.vim	/^let g:__AL_XPT_FLT_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_FTSCP_VIM__	autoload/xpt/ftsc.vim	/^let g:__AL_XPT_FTSCP_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_MSVR_VIM__	autoload/xpt/msvr.vim	/^let g:__AL_XPT_MSVR_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_NG_VIM__	autoload/xpt/ng.vim	/^let g:__AL_XPT_NG_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_PARSER_VIM__	autoload/xpt/parser.vim	/^let g:__AL_XPT_PARSER_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_PHFILTER_VIM__	autoload/xpt/phfilter.vim	/^let g:__AL_XPT_PHFILTER_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_PH_VIM__	autoload/xpt/ph.vim	/^let g:__AL_XPT_PH_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_RCTX_VIM__	autoload/xpt/rctx.vim	/^let g:__AL_XPT_RCTX_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_RENDER_VIM__	autoload/xpt/render.vim	/^let g:__AL_XPT_RENDER_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_SNIPFUNC_VIM__	autoload/xpt/snipfunc.vim	/^let g:__AL_XPT_SNIPFUNC_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_SNIPF_VIM__	autoload/xpt/snipf.vim	/^let g:__AL_XPT_SNIPF_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_SNIPLINE_VIM__	autoload/xpt/snipline.vim	/^let g:__AL_XPT_SNIPLINE_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_SNIP_VIM__	autoload/xpt/snip.vim	/^let g:__AL_XPT_SNIP_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_STSW_VIM__	autoload/xpt/stsw.vim	/^let g:__AL_XPT_STSW_VIM__ = XPT#ver$/;"	v
g:__AL_XPT_ST_VIM__	autoload/xpt/st.vim	/^let g:__AL_XPT_ST_VIM__ = XPT#ver$/;"	v
g:__DEBUG_VIM__	plugin/debug.vim	/^let g:__DEBUG_VIM__ = XPT#ver$/;"	v
g:__PARSER_VIM__	autoload/xpt/test/parser.vim	/^let g:__PARSER_VIM__ = 1$/;"	v
g:__UTIL_VIM__	autoload/xpt/util.vim	/^let g:__UTIL_VIM__ = XPT#ver$/;"	v
g:__XPMARK_VIM__	plugin/xpmark.vim	/^let g:__XPMARK_VIM__ = XPT#ver$/;"	v
g:__XPOPUP_VIM__	plugin/xpopup.vim	/^let g:__XPOPUP_VIM__ = XPT#ver$/;"	v
g:__XPPUM_VIM__	autoload/XPpum.vim	/^let g:__XPPUM_VIM__ = 1$/;"	v
g:__XPREPLACE_VIM__	plugin/xpreplace.vim	/^let g:__XPREPLACE_VIM__ = XPT#ver$/;"	v
g:__XPTEMPLATETEST_VIM__	plugin/xptemplateTest.vim	/^let g:__XPTEMPLATETEST_VIM__ = XPT#ver$/;"	v
g:__XPTEMPLATE_CONF_VIM__	plugin/xptemplate.conf.vim	/^let g:__XPTEMPLATE_CONF_VIM__ = XPT#ver$/;"	v
g:__XPTEMPLATE_IMPORTER_VIM__	plugin/xptemplate.importer.vim	/^let g:__XPTEMPLATE_IMPORTER_VIM__ = XPT#ver$/;"	v
g:__XPTEMPLATE_PARSER_VIM__	plugin/xptemplate.parser.vim	/^let g:__XPTEMPLATE_PARSER_VIM__ = XPT#ver$/;"	v
g:__XPTEMPLATE_VIM__	plugin/xptemplate.vim	/^let g:__XPTEMPLATE_VIM__ = XPT#ver$/;"	v
g:__XPTTESTKEY_VIM__	plugin/xptTestKey.vim	/^let g:__XPTTESTKEY_VIM__ = 2$/;"	v
g:__XPT_DEBUG_VIM__	autoload/xpt/debug.vim	/^let g:__XPT_DEBUG_VIM__ = XPT#ver$/;"	v
g:__XPT_PLUGIN_HIGHLIGHT_VIM__	plugin/xpt.plugin.highlight.vim	/^let g:__XPT_PLUGIN_HIGHLIGHT_VIM__ = XPT#ver$/;"	v
g:__XPT_VIM__	autoload/XPT.vim	/^let g:__XPT_VIM__ = 1$/;"	v
g:cppautoimplemneedc	xptsnippets/ftplugin/cpp/autoimplem.xpt.vim	/^let g:cppautoimplemneedc = 1$/;"	v
g:ftscope	autoload/xpt/test/phfilter.vim	/^let g:ftscope = xpt#ftsc#New()$/;"	v
g:globalStack	autoload/xpt/msvr.vim	/^let g:globalStack = []$/;"	v
g:objcautoimlemneedc	xptsnippets/ftplugin/objc/autoimplem.xpt.vim	/^let g:objcautoimlemneedc = 1$/;"	v
g:xpm_changenr_level	plugin/xpmark.vim	/^let g:xpm_changenr_level = 1000$/;"	v
g:xpm_mark	plugin/xpmark.vim	/^let g:xpm_mark = 'p'$/;"	v
g:xpm_mark_nextline	plugin/xpmark.vim	/^let g:xpm_mark_nextline = 'l'$/;"	v
g:xptBundle	plugin/xptemplate.conf.vim	/^        let g:xptBundle[ ft ] = {}$/;"	v
g:xptBundle	plugin/xptemplate.conf.vim	/^    let g:xptBundle[ ft ][ bundle ] = 1$/;"	v
g:xptBundle	plugin/xptemplate.conf.vim	/^let g:xptBundle = {}$/;"	v
g:xptRenderPhase	autoload/xpt/rctx.vim	/^let g:xptRenderPhase = {$/;"	v
g:xptemplate_always_compile	plugin/xptemplate.conf.vim	/^let g:xptemplate_always_compile = 1$/;"	v
g:xptemplate_brace_complete	plugin/xptemplate.conf.vim	/^    let g:xptemplate_brace_complete = '([{"'''$/;"	v
g:xptemplate_fallback	plugin/xptemplate.conf.vim	/^    let g:xptemplate_fallback = '<NOP>'$/;"	v
g:xptemplate_fallback	plugin/xptemplate.conf.vim	/^    let g:xptemplate_fallback = 'nore:' . g:xptemplate_fallback$/;"	v
g:xptemplate_fallback	plugin/xptemplate.conf.vim	/^    let g:xptemplate_fallback = g:xptemplate_fallback[ 5: ]$/;"	v
g:xptemplate_minimal_prefix	plugin/xptemplate.conf.vim	/^            let g:xptemplate_minimal_prefix = outer + 0$/;"	v
g:xptemplate_minimal_prefix	plugin/xptemplate.conf.vim	/^            let g:xptemplate_minimal_prefix = outer$/;"	v
g:xptemplate_minimal_prefix_nested	plugin/xptemplate.conf.vim	/^            let g:xptemplate_minimal_prefix_nested = inner + 0$/;"	v
g:xptemplate_minimal_prefix_nested	plugin/xptemplate.conf.vim	/^            let g:xptemplate_minimal_prefix_nested = inner$/;"	v
g:xptmode	plugin/xptemplateTest.vim	/^    let g:xptmode = ''$/;"	v
handleUndoRedo	plugin/xpmark.vim	/^fun! s:handleUndoRedo() dict "{{{$/;"	f
i	xptsnippets/ftplugin/vim/vim.xpt.vim	/^    let i += 1$/;"	v
i	xptsnippets/ftplugin/vim/vim.xpt.vim	/^let i = 0$/;"	v
initBufData	plugin/xpmark.vim	/^fun! s:initBufData() "{{{$/;"	f
initCurrentStat	plugin/xpmark.vim	/^fun! s:initCurrentStat() dict "{{{$/;"	f
insertModeUpdate	plugin/xpmark.vim	/^fun! s:insertModeUpdate() dict "{{{$/;"	f
isUpdateNeeded	plugin/xpmark.vim	/^fun! s:isUpdateNeeded() dict "{{{$/;"	f
keytypeHandler.map	autoload/xpt/parser.vim	/^fun! s:keytypeHandler.map( setting, cmdArgs ) "{{{$/;"	f
keytypeHandler.post	autoload/xpt/parser.vim	/^fun! s:keytypeHandler.post( setting, cmdArgs ) "{{{$/;"	f
keytypeHandler.repl	autoload/xpt/parser.vim	/^fun! s:keytypeHandler.repl( setting, cmdArgs ) "{{{$/;"	f
lines	plugin/xptemplate.importer.vim	/^let lines = readfile( fn )$/;"	v
normalModeUpdate	plugin/xpmark.vim	/^fun! s:normalModeUpdate() dict "{{{$/;"	f
p	autoload/xpt/rctx.vim	/^let p = g:xptRenderPhase$/;"	v
popup	plugin/xpopup.vim	/^fun! s:popup( start_col, opt ) dict "{{{$/;"	f
pumCB.onEmpty	plugin/xptemplate.vim	/^fun! s:pumCB.onEmpty(sess) "{{{$/;"	f
pumCB.onOneMatch	plugin/xptemplate.vim	/^fun! s:pumCB.onOneMatch(sess) "{{{$/;"	f
removeMark	plugin/xpmark.vim	/^fun! s:removeMark(name) dict "{{{$/;"	f
s:CHECK_PUM	plugin/xpopup.vim	/^let s:CHECK_PUM = 1$/;"	v
s:FIRST_PHASE	plugin/xptemplateTest.vim	/^let s:FIRST_PHASE = s:phases[ 0 ]$/;"	v
s:FuncClear	plugin/xpt.plugin.highlight.vim	/^let s:FuncClear  = function( '<SNR>' . s:sid . "ClearHL" )$/;"	v
s:FuncUpdate	plugin/xpt.plugin.highlight.vim	/^let s:FuncUpdate = function( '<SNR>' . s:sid . "UpdateHL" )$/;"	v
s:ItemPumCB	plugin/xptemplate.vim	/^let s:ItemPumCB = {}$/;"	v
s:KEYTYPE_MAP	autoload/xpt/parser.vim	/^let s:KEYTYPE_MAP = {$/;"	v
s:KEYTYPE_TO_DICT	autoload/xpt/parser.vim	/^let s:KEYTYPE_TO_DICT = {$/;"	v
s:KEY_NAME	autoload/xpt/parser.vim	/^let s:KEY_NAME = 0$/;"	v
s:KEY_TYPE	autoload/xpt/parser.vim	/^let s:KEY_TYPE = 1$/;"	v
s:LAST_PHASE	plugin/xptemplateTest.vim	/^let s:LAST_PHASE = s:phases[ -1 ]$/;"	v
s:VALUE	autoload/xpt/parser.vim	/^let s:VALUE    = 2$/;"	v
s:_evalCache	autoload/xpt/eval.vim	/^let s:_evalCache = { 'strMask' : {}, 'compiledExpr' : {} }$/;"	v
s:_xpreplace	plugin/xpreplace.vim	/^let s:_xpreplace = { 'post' : {}, 'pre' : {} }$/;"	v
s:actions	plugin/xptTestKey.vim	/^let s:actions = []$/;"	v
s:alignWidth	autoload/xpt/msvr.vim	/^let s:alignWidth = s:_GetAlighWidth()$/;"	v
s:anonymouseIndex	autoload/xpt/render.vim	/^let s:anonymouseIndex = 0$/;"	v
s:anonymouseIndex	plugin/xptemplate.vim	/^let s:anonymouseIndex = 0$/;"	v
s:assert_map	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^let s:assert_map = {$/;"	v
s:braceMap	xptsnippets/ftplugin/sh/sh.xpt.vim	/^let s:braceMap = {$/;"	v
s:buildingSeqNr	autoload/xpt/render.vim	/^let s:buildingSeqNr = 0$/;"	v
s:buildingSeqNr	plugin/xptemplate.vim	/^let s:buildingSeqNr = 0$/;"	v
s:buildingSessionID	autoload/xpt/render.vim	/^let s:buildingSessionID = 0$/;"	v
s:bundle	plugin/xptemplate.conf.vim	/^    let s:bundle = g:xptemplate_bundle$/;"	v
s:bundle	plugin/xptemplate.conf.vim	/^    let s:bundle = split( g:xptemplate_bundle, ',' )$/;"	v
s:charsPatternTable	autoload/xpt/util.vim	/^let s:charsPatternTable = {}$/;"	v
s:conf	plugin/xptTestKey.vim	/^let s:conf =      g:xptemplate_key$/;"	v
s:conf	plugin/xptTestKey.vim	/^let s:conf = tolower( s:conf )$/;"	v
s:crIndent	xptsnippets/ftplugin/_common/common.bracketcmpl.xpt.vim	/^let s:crIndent = 0$/;"	v
s:defaultImpl	xptsnippets/ftplugin/c/autoimplem.xpt.vim	/^let s:defaultImpl = { 'void'  : ''$/;"	v
s:doctypes	xptsnippets/ftplugin/html/html.xpt.vim	/^let s:doctypes = {$/;"	v
s:each_list	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^let s:each_list = [ 'byte', 'char', 'cons', 'index', 'key',$/;"	v
s:emptyHistoryElt	plugin/xpmark.vim	/^let s:emptyHistoryElt = {'list':[], 'dict' :{}, 'likely' : { 'start' : '', 'end' : '' }}$/;"	v
s:errorTolerance	plugin/xpopup.vim	/^let s:errorTolerance = 3$/;"	v
s:expandablePattern	plugin/xptemplate.vim	/^let s:expandablePattern     = '\\V\\S\\+...\\$'$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f = {}$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.C = s:f.Context$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.Edges = s:f.ItemEdges$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.IV = s:f.ItemInitValue$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.IVE = s:f.ItemInitValueWithEdge$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.N = s:f.ItemName$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.NN = s:f.ItemFullname$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.R = s:f.Reference$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.SV = s:f.SubstituteWithValue$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.UE = s:f.UnescapeMarks$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.V = s:f.ItemValue$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.V0 = s:f.ItemStrippedValue$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.VOID = s:f.Void$/;"	v
s:f	autoload/xpt/snipfunc.vim	/^let s:f.VS = s:f.ItemValueStripped$/;"	v
s:f	xptsnippets/ftplugin/_comment/doubleSign.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_common/cmn.counter.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_common/common.bracketcmpl.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_common/common.path.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_common/common.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_common/inlineComplete.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_condition/ecma.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_condition/lisp.like.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_func/c.like.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_loops/for.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_loops/java.for.like.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_preprocessor/c.like.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_printf/c.like.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/_structures/c.like.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/ada/ada.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/c/autoimplem.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/c/autoimplem.xpt.vim	/^let s:f.todoText = "\\t\/* TODO : implement here *\/"$/;"	v
s:f	xptsnippets/ftplugin/c/c.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/cabal/cabal.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/cg/cg.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/cpp/autoimplem.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/cpp/cpp.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/cs/cs.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/css/css.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/dot/dot.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/erlang/erlang.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/factor/factor.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/gitconfig/gitconfig.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/gnuplot/gnuplot.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/haskell/haskell.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/help/help.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/html/html.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/htmldjango/htmldjango.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/java/java.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/javascript/javascript.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/javascript/jquery.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/json/json.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/lex/lex.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/lua/lua.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/make/make.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/markdown/markdown.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/objc/objc.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/ocaml.revised/ocaml.revised.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/ocaml/ocaml.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/perl/perl.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/php/php.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/python/python.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/r/r.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/rst/rst.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/scheme/scheme.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/sh/sh.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/sql/sql.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/svg/svg.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/tcl/tcl.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/tex/tex.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/unknown/unknown.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/vim/autoload.vim.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/vim/vim.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/xml/xml.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/xpt/xpt.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/xptest/xptest.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/xslt/xslt.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:f	xptsnippets/ftplugin/yacc/yacc.xpt.vim	/^let s:f = g:XPTfuncs()$/;"	v
s:filename	plugin/xptemplate.conf.vim	/^let s:filename = 'xptemplate.conf.vim'$/;"	v
s:fn	plugin/xptemplateTest.vim	/^let s:fn = 'test.page' . g:xptmode$/;"	v
s:globalLogLevel	autoload/xpt/debug.vim	/^let s:globalLogLevel = 'debug'$/;"	v
s:globalLogLevel	autoload/xpt/debug.vim	/^let s:globalLogLevel = 'warn'$/;"	v
s:globalLogLevel	plugin/debug.vim	/^let s:globalLogLevel = 'warn'$/;"	v
s:go	plugin/xptTestKey.vim	/^let s:go = "\\<C-r>=XPTtestKeyGo()\\<cr>"$/;"	v
s:incPattern	autoload/xpt/ph.vim	/^let s:incPattern = '\\V\\^:\\zs\\.\\*\\ze:\\$\\|\\^Include:\\zs\\.\\*\\$'$/;"	v
s:insertPattern	plugin/xpmark.vim	/^let s:insertPattern = '[i]'$/;"	v
s:key	plugin/xptemplate.conf.vim	/^    let s:key = '$'.s:key$/;"	v
s:key	plugin/xptemplate.conf.vim	/^  let s:key = matchstr(s:v, '\\V\\^\\[^=]\\*\\ze=')$/;"	v
s:keytypeHandler	autoload/xpt/parser.vim	/^let s:keytypeHandler = {}$/;"	v
s:lastSt	plugin/xptemplateTest.vim	/^let s:lastSt = ''$/;"	v
s:log	autoload/xpt/act/cmn.vim	/^let s:log = xpt#debug#Logger( 'debug' )$/;"	v
s:log	autoload/xpt/act/cmn.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/act/fillin.vim	/^let s:log = xpt#debug#Logger( 'debug' )$/;"	v
s:log	autoload/xpt/act/fillin.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/eval.vim	/^let s:log = xpt#debug#Logger( 'debug' )$/;"	v
s:log	autoload/xpt/eval.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/flt.vim	/^let s:log = xpt#debug#Logger( 'debug' )$/;"	v
s:log	autoload/xpt/flt.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/group.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/msvr.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/parser.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/ph.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/phfilter.vim	/^let s:log = xpt#debug#Logger( 'debug' )$/;"	v
s:log	autoload/xpt/phfilter.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/rctx.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/render.vim	/^let s:log = xpt#debug#Logger( 'debug' )$/;"	v
s:log	autoload/xpt/render.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/snip.vim	/^let s:log = xpt#debug#Logger( 'debug' )$/;"	v
s:log	autoload/xpt/snip.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/snipf.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/snipfunc.vim	/^let s:log = xpt#debug#Logger( 'debug' )$/;"	v
s:log	autoload/xpt/snipfunc.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/snipline.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/st.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/stsw.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	autoload/xpt/util.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	plugin/xpmark.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	plugin/xpopup.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	plugin/xpreplace.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	plugin/xptemplate.parser.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	plugin/xptemplate.vim	/^let s:log = CreateLogger( 'debug' )$/;"	v
s:log	plugin/xptemplate.vim	/^let s:log = CreateLogger( 'warn' )$/;"	v
s:log	plugin/xptemplate.vim	/^let s:log = xpt#debug#Logger( 'debug' )$/;"	v
s:log	plugin/xptemplate.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:log	plugin/xptemplateTest.vim	/^let s:log = xpt#debug#Logger( 'warn' )$/;"	v
s:logLevels	autoload/xpt/debug.vim	/^let s:logLevels = {$/;"	v
s:logLevels	plugin/debug.vim	/^let s:logLevels = {$/;"	v
s:logLocation	autoload/xpt/debug.vim	/^    let s:logLocation = $HOME $/;"	v
s:logLocation	autoload/xpt/debug.vim	/^    let s:logLocation = finddir( $HOME . '\/tmp' )$/;"	v
s:logLocation	autoload/xpt/debug.vim	/^let s:logLocation .= '\/vim.log'$/;"	v
s:logLocation	plugin/debug.vim	/^    let s:logLocation = $HOME $/;"	v
s:logLocation	plugin/debug.vim	/^    let s:logLocation = finddir( $HOME . '\/tmp' )$/;"	v
s:logLocation	plugin/debug.vim	/^let s:logLocation .= '\/vim.log'$/;"	v
s:loggerPrototype	autoload/xpt/debug.vim	/^let s:loggerPrototype = {}$/;"	v
s:loggerPrototype	autoload/xpt/debug.vim	/^let s:loggerPrototype.Debug       = function( "<SNR>" . s:sid . "Debug"      )$/;"	v
s:loggerPrototype	autoload/xpt/debug.vim	/^let s:loggerPrototype.Error       = function( "<SNR>" . s:sid . "Error"      )$/;"	v
s:loggerPrototype	autoload/xpt/debug.vim	/^let s:loggerPrototype.Fatal       = function( "<SNR>" . s:sid . "Fatal"      )$/;"	v
s:loggerPrototype	autoload/xpt/debug.vim	/^let s:loggerPrototype.Info        = function( "<SNR>" . s:sid . "Info"       )$/;"	v
s:loggerPrototype	autoload/xpt/debug.vim	/^let s:loggerPrototype.Log         = function( "<SNR>" . s:sid . "Log"        )$/;"	v
s:loggerPrototype	autoload/xpt/debug.vim	/^let s:loggerPrototype.LogNothing  = function( "<SNR>" . s:sid . "LogNothing" )$/;"	v
s:loggerPrototype	autoload/xpt/debug.vim	/^let s:loggerPrototype.Warn        = function( "<SNR>" . s:sid . "Warn"       )$/;"	v
s:loggerPrototype	plugin/debug.vim	/^let s:loggerPrototype = {}$/;"	v
s:loggerPrototype	plugin/debug.vim	/^let s:loggerPrototype.Debug       = function( "<SNR>" . s:sid . "Debug"      )$/;"	v
s:loggerPrototype	plugin/debug.vim	/^let s:loggerPrototype.Error       = function( "<SNR>" . s:sid . "Error"      )$/;"	v
s:loggerPrototype	plugin/debug.vim	/^let s:loggerPrototype.Fatal       = function( "<SNR>" . s:sid . "Fatal"      )$/;"	v
s:loggerPrototype	plugin/debug.vim	/^let s:loggerPrototype.Info        = function( "<SNR>" . s:sid . "Info"       )$/;"	v
s:loggerPrototype	plugin/debug.vim	/^let s:loggerPrototype.Log         = function( "<SNR>" . s:sid . "Log"        )$/;"	v
s:loggerPrototype	plugin/debug.vim	/^let s:loggerPrototype.LogNothing  = function( "<SNR>" . s:sid . "LogNothing" )$/;"	v
s:loggerPrototype	plugin/debug.vim	/^let s:loggerPrototype.Warn        = function( "<SNR>" . s:sid . "Warn"       )$/;"	v
s:m	syntax/xpt.vim	/^let s:m = s:GetMark()$/;"	v
s:matchingCmd	plugin/xpt.plugin.highlight.vim	/^    let s:matchingCmd = {$/;"	v
s:nIndent	xptsnippets/ftplugin/html/html.xpt.vim	/^let s:nIndent = 0$/;"	v
s:nIndent	xptsnippets/ftplugin/xml/xml.xpt.vim	/^let s:nIndent = 0$/;"	v
s:noEsp	autoload/xpt/snipf.vim	/^let s:noEsp   = XPT#nonEscaped$/;"	v
s:nonEscaped	plugin/xptemplate.vim	/^let s:nonEscaped =$/;"	v
s:nullDict	plugin/xptemplate.vim	/^let s:nullDict = {}$/;"	v
s:nullList	plugin/xptemplate.vim	/^let s:nullList = []$/;"	v
s:oldcpo	autoload/XPT.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/XPpum.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/act/cmn.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/act/fillin.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/debug.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/eval.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/flt.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/ftsc.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/group.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/msvr.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/ng.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/parser.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/ph.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/phfilter.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/rctx.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/render.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/snip.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/snipf.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/snipfunc.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/snipline.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/st.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/stsw.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	autoload/xpt/util.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	plugin/debug.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	plugin/xpmark.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	plugin/xpopup.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	plugin/xpreplace.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	plugin/xptemplate.conf.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	plugin/xptemplate.parser.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	plugin/xptemplate.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	plugin/xptemplateTest.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldcpo	xptsnippets/ftplugin/vim/vim.xpt.vim	/^let s:oldcpo = &cpo$/;"	v
s:opt	plugin/xpopup.vim	/^let s:opt = {$/;"	v
s:options	xptsnippets/ftplugin/javascript/jquery.xpt.vim	/^let s:options = {$/;"	v
s:pairMap	xptsnippets/ftplugin/_common/common.bracketcmpl.xpt.vim	/^let s:pairMap = {}$/;"	v
s:pairs	xptsnippets/ftplugin/_common/common.bracketcmpl.xpt.vim	/^let s:pairs = { 'left' : "'" . '"([{<|*`+ ',$/;"	v
s:path	plugin/xptemplate.conf.vim	/^let s:path = expand( "<sfile>" )$/;"	v
s:path	plugin/xptemplate.conf.vim	/^let s:path = matchstr( s:path, '\\V\\.\\*\\ze\/plugin\/' . s:filename )$/;"	v
s:path	plugin/xptemplate.conf.vim	/^let s:path = substitute( s:path, '\\', '\/', 'g' )$/;"	v
s:pattern	xptsnippets/ftplugin/eruby/eruby.ftdetect.vim	/^let s:pattern = {$/;"	v
s:pattern	xptsnippets/ftplugin/html/html.ftdetect.vim	/^let s:pattern = {$/;"	v
s:pattern	xptsnippets/ftplugin/htmldjango/htmldjango.ftdetect.vim	/^let s:pattern = {$/;"	v
s:pattern	xptsnippets/ftplugin/php/php.ftdetect.vim	/^    let s:pattern.php.start = '\\V\\c<?php\\>'$/;"	v
s:pattern	xptsnippets/ftplugin/php/php.ftdetect.vim	/^let s:pattern = {$/;"	v
s:phaseGraph	autoload/xpt/rctx.vim	/^let s:phaseGraph = {$/;"	v
s:phases	plugin/xptemplateTest.vim	/^let s:phases = [ 1, 2, 3, 4 ]$/;"	v
s:plugins	plugin/xptemplate.vim	/^let s:plugins = {}$/;"	v
s:preinputs	plugin/xptemplateTest.vim	/^let s:preinputs = {$/;"	v
s:priPtn	plugin/xptemplate.vim	/^let s:priPtn = 'all\\|spec\\|like\\|lang\\|sub\\|personal\\|\\d\\+'$/;"	v
s:printfElts	xptsnippets/ftplugin/_printf/c.like.xpt.vim	/^let s:printfElts = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'$/;"	v
s:printfItemPattern	xptsnippets/ftplugin/_printf/c.like.xpt.vim	/^let s:printfItemPattern = '\\V\\C' . '%' . '\\[+\\- 0#]\\*' . '\\%(*\\|\\d\\+\\)\\?' . '\\(.*\\|.\\d\\+\\)\\?' . '\\[hlL]\\?' . '\\(\\[cdieEfgGosuxXpn]\\)'$/;"	v
s:printfSpecifierMap	xptsnippets/ftplugin/_printf/c.like.xpt.vim	/^let s:printfSpecifierMap = {$/;"	v
s:priorities	autoload/xpt/ng.vim	/^let s:priorities = XPT#priorities$/;"	v
s:priorities	autoload/xpt/snipf.vim	/^let s:priorities = XPT#priorities$/;"	v
s:priorities	plugin/xptemplate.vim	/^let s:priorities = XPT#priorities$/;"	v
s:priorities	plugin/xptemplate.vim	/^let s:priorities = {'all' : 64, 'spec' : 48, 'like' : 32, 'lang' : 16, 'sub' : 8, 'personal' : 0}$/;"	v
s:proto	autoload/xpt/flt.vim	/^let s:proto = {$/;"	v
s:proto	autoload/xpt/st.vim	/^let s:proto  = {$/;"	v
s:protoDefault	autoload/xpt/st.vim	/^let s:protoDefault = {$/;"	v
s:prototype	plugin/xpmark.vim	/^let s:prototype =  s:ClassPrototype($/;"	v
s:pumCB	plugin/xptemplate.vim	/^let s:pumCB = {}$/;"	v
s:pvs	plugin/xptemplate.conf.vim	/^let s:pvs = split(g:xptemplate_vars, '\\V'.s:nonEscaped.'&')$/;"	v
s:rangePattern	xptsnippets/ftplugin/python/python.xpt.vim	/^let s:rangePattern = '\\V\\^r\\%[ange(]\\$'$/;"	v
s:renderStack	autoload/xpt/render.vim	/^let s:renderStack = []$/;"	v
s:repetitionPattern	plugin/xptemplate.vim	/^let s:repetitionPattern     = '\\w\\*...\\w\\*'$/;"	v
s:sessionPrototype	plugin/xpopup.vim	/^let s:sessionPrototype = {$/;"	v
s:sessionPrototype2	plugin/xpopup.vim	/^let s:sessionPrototype2 =  s:ClassPrototype($/;"	v
s:skipPattern	xptsnippets/ftplugin/eruby/eruby.ftdetect.vim	/^let s:skipPattern = 'synIDattr(synID(line("."), col("."), 0), "name") =~? "\\\\vstring|comment"'$/;"	v
s:skipPattern	xptsnippets/ftplugin/html/html.ftdetect.vim	/^let s:skipPattern = XPT#skipPattern$/;"	v
s:skipPattern	xptsnippets/ftplugin/htmldjango/htmldjango.ftdetect.vim	/^let s:skipPattern = 'synIDattr(synID(line("."), col("."), 0), "name") =~? "\\\\vstring|comment"'$/;"	v
s:skipPattern	xptsnippets/ftplugin/php/php.ftdetect.vim	/^let s:skipPattern = 'synIDattr(synID(line("."), col("."), 0), "name") =~? "\\\\vstring|comment"'$/;"	v
s:snipScopePrototype	plugin/xptemplate.vim	/^let s:snipScopePrototype = {$/;"	v
s:stHandler	autoload/xpt/parser.vim	/^let s:stHandler = {}$/;"	v
s:stHandler	autoload/xpt/parser.vim	/^let s:stHandler.PostQuoter = s:stHandler.postQuoter$/;"	v
s:suite	autoload/xpt/test/phfilter.vim	/^let s:suite = {}$/;"	v
s:suiteSet	plugin/xptTestKey.vim	/^let s:suiteSet = {$/;"	v
s:suites	plugin/xptTestKey.vim	/^let s:suites = []$/;"	v
s:toTest	plugin/xptemplateTest.vim	/^let s:toTest = []$/;"	v
s:topFT	xptsnippets/ftplugin/eruby/eruby.ftdetect.vim	/^let s:topFT = 'eruby'$/;"	v
s:topFT	xptsnippets/ftplugin/htmldjango/htmldjango.ftdetect.vim	/^let s:topFT = 'htmldjango'$/;"	v
s:topFT	xptsnippets/ftplugin/php/php.ftdetect.vim	/^let s:topFT = 'html'$/;"	v
s:typeMap	plugin/xptemplateTest.vim	/^let s:typeMap = { '1' : 'statusline',$/;"	v
s:val	plugin/xptemplate.conf.vim	/^  let s:val = matchstr(s:v, '\\V\\^\\[^=]\\*=\\zs\\.\\*')$/;"	v
s:xpt_snip	xptsnippets/ftplugin/xpt/xpt.xpt.vim	/^let s:xpt_snip = split( globpath( &rtp, "ftplugin\/**\/*.xpt.vim" ), "\\n" )$/;"	v
s:xpts	xptsnippets/ftplugin/xpt/xpt.xpt.vim	/^        let s:xpts[ ft ] = []$/;"	v
s:xpts	xptsnippets/ftplugin/xpt/xpt.xpt.vim	/^    let s:xpts[ ft ] += [ snip ]$/;"	v
s:xpts	xptsnippets/ftplugin/xpt/xpt.xpt.vim	/^let s:xpts = {}$/;"	v
saveCurrentCursorStat	plugin/xpmark.vim	/^fun! s:saveCurrentCursorStat() dict "{{{$/;"	f
saveCurrentStat	plugin/xpmark.vim	/^fun! s:saveCurrentStat() dict " {{{$/;"	f
sessionPrototype.addList	plugin/xpopup.vim	/^fun! s:sessionPrototype.addList( list ) "{{{$/;"	f
sessionPrototype.createPrefixIndex	plugin/xpopup.vim	/^fun! s:sessionPrototype.createPrefixIndex(list) "{{{$/;"	f
sessionPrototype.updatePrefixIndex	plugin/xpopup.vim	/^fun! s:sessionPrototype.updatePrefixIndex(list) "{{{$/;"	f
snapshot	plugin/xpmark.vim	/^fun! s:snapshot() dict "{{{$/;"	f
stHandler.ComeFirst	autoload/xpt/parser.vim	/^fun! s:stHandler.ComeFirst( setting, cmdArgs ) "{{{$/;"	f
stHandler.ComeLast	autoload/xpt/parser.vim	/^fun! s:stHandler.ComeLast( setting, cmdArgs ) "{{{$/;"	f
stHandler.postQuoter	autoload/xpt/parser.vim	/^fun! s:stHandler.postQuoter( setting, cmdArgs ) "{{{$/;"	f
suite.BasicReplacePHs	autoload/xpt/test/phfilter.vim	/^fun! s:suite.BasicReplacePHs() "{{{$/;"	f
suite.EvalInstantValue_Basic	autoload/xpt/test/phfilter.vim	/^fun! s:suite.EvalInstantValue_Basic() "{{{$/;"	f
suite.EvalInstantValue_DynaIndent	autoload/xpt/test/phfilter.vim	/^fun! s:suite.EvalInstantValue_DynaIndent() "{{{$/;"	f
suite.EvalInstantValue_Inc	autoload/xpt/test/phfilter.vim	/^fun! s:suite.EvalInstantValue_Inc() "{{{$/;"	f
suite.EvalInstantValue_Inc_DynIndent	autoload/xpt/test/phfilter.vim	/^fun! s:suite.EvalInstantValue_Inc_DynIndent() "{{{$/;"	f
suite.EvalInstantValue_Indent	autoload/xpt/test/phfilter.vim	/^fun! s:suite.EvalInstantValue_Indent() "{{{$/;"	f
suite.GenerateSnip	autoload/xpt/test/phfilter.vim	/^fun! s:suite.GenerateSnip() "{{{$/;"	f
suite.PostQuote_Basic	autoload/xpt/test/phfilter.vim	/^fun! s:suite.PostQuote_Basic() "{{{$/;"	f
suite.Repetition_Basic	autoload/xpt/test/phfilter.vim	/^fun! s:suite.Repetition_Basic() "{{{$/;"	f
suite.ReplacePHs_CreateEdge	autoload/xpt/test/phfilter.vim	/^fun! s:suite.ReplacePHs_CreateEdge() "{{{$/;"	f
suite.ReplacePHs_MultiPHs	autoload/xpt/test/phfilter.vim	/^fun! s:suite.ReplacePHs_MultiPHs() "{{{$/;"	f
t	xptsnippets/ftplugin/vim/vim.xpt.vim	/^let `t^_0 = reltime()$/;"	v
t	xptsnippets/ftplugin/vim/vim.xpt.vim	/^let `t^_1 = reltime( `t^_0 )$/;"	v
updateForLinewiseDeletion	plugin/xpmark.vim	/^fun! s:updateForLinewiseDeletion( fromLine, toLine ) dict "{{{$/;"	f
updateMarks	plugin/xpmark.vim	/^fun! s:updateMarks( indexRange, changeStart, changeEnd ) dict "{{{$/;"	f
updateMarksAfter	plugin/xpmark.vim	/^fun! s:updateMarksAfter( indexRange, changeStart, changeEnd ) dict "{{{$/;"	f
updateMarksAfterLine	plugin/xpmark.vim	/^fun! s:updateMarksAfterLine(line) dict "{{{$/;"	f
updateMarksBefore	plugin/xpmark.vim	/^fun! s:updateMarksBefore( indexRange, changeStart, changeEnd ) dict "{{{$/;"	f
updateWithNewChangeRange	plugin/xpmark.vim	/^fun! s:updateWithNewChangeRange( changeStart, changeEnd ) dict "{{{$/;"	f
xpt#act#cmn#PHsToEmbed	autoload/xpt/act/cmn.vim	/^fun! xpt#act#cmn#PHsToEmbed( so, flt ) "{{{$/;"	f
xpt#act#fillin#embed	autoload/xpt/act/fillin.vim	/^fun! xpt#act#fillin#embed( rctx, flt ) "{{{$/;"	f
xpt#act#fillin#resetIndent	autoload/xpt/act/fillin.vim	/^fun! xpt#act#fillin#resetIndent( rctx, flt ) "{{{$/;"	f
xpt#debug#Assert	autoload/xpt/debug.vim	/^fun! xpt#debug#Assert( shouldBeTrue, msg ) "{{{$/;"	f
xpt#debug#EchoList	autoload/xpt/debug.vim	/^fun! xpt#debug#EchoList( l ) "{{{$/;"	f
xpt#debug#List	autoload/xpt/debug.vim	/^fun! xpt#debug#List( l ) "{{{$/;"	f
xpt#debug#Logger	autoload/xpt/debug.vim	/^fun! xpt#debug#Logger( level ) "{{{$/;"	f
xpt#eval#Compile	autoload/xpt/eval.vim	/^fun! xpt#eval#Compile( s, xfunc ) "{{{$/;"	f
xpt#eval#Eval	autoload/xpt/eval.vim	/^fun! xpt#eval#Eval( str, evalScope, evalContext ) "{{{$/;"	f
xpt#flt#AddIndentAccordingToPos	autoload/xpt/flt.vim	/^fun! xpt#flt#AddIndentAccordingToPos( flt, startPos ) "{{{$/;"	f
xpt#flt#AdjustIndent	autoload/xpt/flt.vim	/^fun! xpt#flt#AdjustIndent( flt ) "{{{$/;"	f
xpt#flt#Eval	autoload/xpt/flt.vim	/^fun! xpt#flt#Eval( flt, container, context ) "{{{$/;"	f
xpt#flt#Extend	autoload/xpt/flt.vim	/^fun! xpt#flt#Extend( flt ) "{{{$/;"	f
xpt#flt#New	autoload/xpt/flt.vim	/^fun! xpt#flt#New( nIndent, text, ... ) "{{{$/;"	f
xpt#flt#NewSimple	autoload/xpt/flt.vim	/^fun! xpt#flt#NewSimple( nIndent, text, ... ) "{{{$/;"	f
xpt#flt#ParseCursorSpec	autoload/xpt/flt.vim	/^fun! xpt#flt#ParseCursorSpec( flt ) "{{{$/;"	f
xpt#flt#Simplify	autoload/xpt/flt.vim	/^fun! xpt#flt#Simplify( flt ) "{{{$/;"	f
xpt#ftsc#CheckAndSetSnippetLoaded	autoload/xpt/ftsc.vim	/^fun! xpt#ftsc#CheckAndSetSnippetLoaded( inst, filename ) "{{{$/;"	f
xpt#ftsc#GetPHPieces	autoload/xpt/ftsc.vim	/^fun! xpt#ftsc#GetPHPieces( ftsc, phsID ) "{{{$/;"	f
xpt#ftsc#Init	autoload/xpt/ftsc.vim	/^fun! xpt#ftsc#Init( ftsc ) "{{{$/;"	f
xpt#ftsc#IsSnippetLoaded	autoload/xpt/ftsc.vim	/^fun! xpt#ftsc#IsSnippetLoaded( inst, filename ) "{{{$/;"	f
xpt#ftsc#New	autoload/xpt/ftsc.vim	/^fun! xpt#ftsc#New() "{{{$/;"	f
xpt#ftsc#PushPHPieces	autoload/xpt/ftsc.vim	/^fun! xpt#ftsc#PushPHPieces( ftsc, phs ) "{{{$/;"	f
xpt#ftsc#SetSnippetLoaded	autoload/xpt/ftsc.vim	/^fun! xpt#ftsc#SetSnippetLoaded( inst, filename ) "{{{$/;"	f
xpt#group#InsertPH	autoload/xpt/group.vim	/^fun! xpt#group#InsertPH( g, ph, where ) "{{{$/;"	f
xpt#group#New	autoload/xpt/group.vim	/^fun! xpt#group#New( name, sessid ) "{{{$/;"	f
xpt#msvr#Add	autoload/xpt/msvr.vim	/^fun! xpt#msvr#Add( inst, mode, key ) "{{{$/;"	f
xpt#msvr#AddList	autoload/xpt/msvr.vim	/^fun! xpt#msvr#AddList( inst, ... ) "{{{$/;"	f
xpt#msvr#Literalize	autoload/xpt/msvr.vim	/^fun! xpt#msvr#Literalize( inst, ... ) "{{{$/;"	f
xpt#msvr#MapCommand	autoload/xpt/msvr.vim	/^fun! xpt#msvr#MapCommand( info ) "{{{$/;"	f
xpt#msvr#MapInfo	autoload/xpt/msvr.vim	/^fun! xpt#msvr#MapInfo( key, mode, isbuffer ) "{{{$/;"	f
xpt#msvr#New	autoload/xpt/msvr.vim	/^fun! xpt#msvr#New( isLocal ) "{{{$/;"	f
xpt#msvr#Restore	autoload/xpt/msvr.vim	/^fun! xpt#msvr#Restore( inst ) "{{{$/;"	f
xpt#msvr#Save	autoload/xpt/msvr.vim	/^fun! xpt#msvr#Save( inst ) "{{{$/;"	f
xpt#msvr#UnmapAll	autoload/xpt/msvr.vim	/^fun! xpt#msvr#UnmapAll( inst ) "{{{$/;"	f
xpt#ng#SetFiletypeDetector	autoload/xpt/ng.vim	/^fun! xpt#ng#SetFiletypeDetector( funName ) "{{{$/;"	f
xpt#parser#Compact	autoload/xpt/parser.vim	/^fun! xpt#parser#Compact( lines ) "{{{$/;"	f
xpt#parser#Compile	autoload/xpt/parser.vim	/^fun! xpt#parser#Compile( fn ) "{{{$/;"	f
xpt#parser#CompileCompacted	autoload/xpt/parser.vim	/^fun! xpt#parser#CompileCompacted( lines ) "{{{$/;"	f
xpt#parser#CompileSnippet	autoload/xpt/parser.vim	/^fun! xpt#parser#CompileSnippet( lines ) "{{{$/;"	f
xpt#parser#ConvertIndentToTab	autoload/xpt/parser.vim	/^fun! xpt#parser#ConvertIndentToTab( snipLines ) "{{{$/;"	f
xpt#parser#Embed	autoload/xpt/parser.vim	/^fun! xpt#parser#Embed(...) "{{{$/;"	f
xpt#parser#Include	autoload/xpt/parser.vim	/^fun! xpt#parser#Include(...) "{{{$/;"	f
xpt#parser#LoadFTSnippets	autoload/xpt/parser.vim	/^fun! xpt#parser#LoadFTSnippets( ft ) "{{{$/;"	f
xpt#parser#LoadFtDetectors	autoload/xpt/parser.vim	/^fun! xpt#parser#LoadFtDetectors( ft ) "{{{$/;"	f
xpt#parser#LoadSnippets	autoload/xpt/parser.vim	/^fun! xpt#parser#LoadSnippets() "{{{$/;"	f
xpt#parser#SetVar	autoload/xpt/parser.vim	/^fun! xpt#parser#SetVar( nameSpaceValue ) "{{{$/;"	f
xpt#parser#SnipSet	autoload/xpt/parser.vim	/^fun! xpt#parser#SnipSet( dictNameValue ) "{{{$/;"	f
xpt#parser#SnippetFileInit	autoload/xpt/parser.vim	/^fun! xpt#parser#SnippetFileInit( filename, ... ) "{{{$/;"	f
xpt#ph#AlterFilterByPHName	autoload/xpt/ph.vim	/^fun! xpt#ph#AlterFilterByPHName( phname, fltText ) "{{{$/;"	f
xpt#ph#CreateEvaluatablePHElt	autoload/xpt/ph.vim	/^fun! xpt#ph#CreateEvaluatablePHElt( snipObject, ph, key ) "{{{$/;"	f
xpt#ph#CreateFromScreen	autoload/xpt/ph.vim	/^fun! xpt#ph#CreateFromScreen( snipObject, nameInfo, valueInfo ) "{{{$/;"	f
xpt#ph#CreatePHEltFilter	autoload/xpt/ph.vim	/^fun! xpt#ph#CreatePHEltFilter( snipObject, elt ) "{{{$/;"	f
xpt#ph#CreateSpecial	autoload/xpt/ph.vim	/^fun! xpt#ph#CreateSpecial( snipObject, ph ) "{{{$/;"	f
xpt#ph#FilterEltKeys	autoload/xpt/ph.vim	/^fun! xpt#ph#FilterEltKeys( ph ) "{{{$/;"	f
xpt#ph#GetPresetFilter	autoload/xpt/ph.vim	/^fun! xpt#ph#GetPresetFilter( ph, setting ) "{{{$/;"	f
xpt#ph#New	autoload/xpt/ph.vim	/^fun! xpt#ph#New( snipObject, pieces ) "{{{$/;"	f
xpt#phfilter#AppendRst	autoload/xpt/phfilter.vim	/^fun! xpt#phfilter#AppendRst( fctx, lst, ph ) "{{{$/;"	f
xpt#phfilter#EvalInstantFilters	autoload/xpt/phfilter.vim	/^fun! xpt#phfilter#EvalInstantFilters( fctx ) "{{{$/;"	f
xpt#phfilter#EvalPresetFilters	autoload/xpt/phfilter.vim	/^fun! xpt#phfilter#EvalPresetFilters( fctx ) "{{{$/;"	f
xpt#phfilter#FeedPH	autoload/xpt/phfilter.vim	/^fun! xpt#phfilter#FeedPH( fctx ) "{{{$/;"	f
xpt#phfilter#Filter	autoload/xpt/phfilter.vim	/^fun! xpt#phfilter#Filter( so, PHFilterName, extContext ) "{{{$/;"	f
xpt#phfilter#HandleEltFilterRst	autoload/xpt/phfilter.vim	/^fun! xpt#phfilter#HandleEltFilterRst( fctx, flt ) "{{{$/;"	f
xpt#phfilter#PostQuote	autoload/xpt/phfilter.vim	/^fun! xpt#phfilter#PostQuote( fctx ) "{{{$/;"	f
xpt#phfilter#Repetition	autoload/xpt/phfilter.vim	/^fun! xpt#phfilter#Repetition( fctx ) "{{{$/;"	f
xpt#phfilter#ReplacePH	autoload/xpt/phfilter.vim	/^fun! xpt#phfilter#ReplacePH( fctx ) "{{{$/;"	f
xpt#phfilter#UpdateIndent	autoload/xpt/phfilter.vim	/^fun! xpt#phfilter#UpdateIndent( fctx, last ) "{{{$/;"	f
xpt#rctx#AddDefaultPHFilters	autoload/xpt/rctx.vim	/^fun! xpt#rctx#AddDefaultPHFilters( rctx, ph ) "{{{$/;"	f
xpt#rctx#AddGroup	autoload/xpt/rctx.vim	/^fun! xpt#rctx#AddGroup( rctx, g ) "{{{$/;"	f
xpt#rctx#AddPHToGroup	autoload/xpt/rctx.vim	/^fun! xpt#rctx#AddPHToGroup( rctx, ph ) "{{{$/;"	f
xpt#rctx#GetGroup	autoload/xpt/rctx.vim	/^fun! xpt#rctx#GetGroup( rctx, name ) "{{{$/;"	f
xpt#rctx#InitOrderedGroupList	autoload/xpt/rctx.vim	/^fun! xpt#rctx#InitOrderedGroupList( rctx ) "{{{$/;"	f
xpt#rctx#New	autoload/xpt/rctx.vim	/^fun! xpt#rctx#New( x ) "{{{$/;"	f
xpt#rctx#Pop	autoload/xpt/rctx.vim	/^fun! xpt#rctx#Pop() "{{{$/;"	f
xpt#rctx#Push	autoload/xpt/rctx.vim	/^fun! xpt#rctx#Push() "{{{$/;"	f
xpt#rctx#SwitchPhase	autoload/xpt/rctx.vim	/^fun! xpt#rctx#SwitchPhase( inst, nextPhase ) "{{{$/;"	f
xpt#rctx#UserOut	autoload/xpt/rctx.vim	/^fun! xpt#rctx#UserOut( rctx, text ) "{{{$/;"	f
xpt#rctx#UserOutAppend	autoload/xpt/rctx.vim	/^fun! xpt#rctx#UserOutAppend( rctx, text ) "{{{$/;"	f
xpt#render#AppendFilter	autoload/xpt/render.vim	/^fun! xpt#render#AppendFilter( render, flt ) "{{{$/;"	f
xpt#render#AppendMultiLine	autoload/xpt/render.vim	/^fun! xpt#render#AppendMultiLine( render, text, nIndent ) "{{{$/;"	f
xpt#render#AppendText	autoload/xpt/render.vim	/^fun! xpt#render#AppendText( render, text ) "{{{$/;"	f
xpt#render#BuildPHs	autoload/xpt/render.vim	/^fun! xpt#render#BuildPHs( render, phs ) "{{{$/;"	f
xpt#render#GenScreenData	autoload/xpt/render.vim	/^fun! xpt#render#GenScreenData( render ) "{{{$/;"	f
xpt#render#GenScreenDataOfPHs	autoload/xpt/render.vim	/^fun! xpt#render#GenScreenDataOfPHs( render, phs ) "{{{$/;"	f
xpt#render#New	autoload/xpt/render.vim	/^fun! xpt#render#New( rctx, posStart, ... )$/;"	f
xpt#render#UpdatePosInfo	autoload/xpt/render.vim	/^fun! xpt#render#UpdatePosInfo( render ) "{{{$/;"	f
xpt#snip#Compile	autoload/xpt/snip.vim	/^fun! xpt#snip#Compile( so ) "{{{$/;"	f
xpt#snip#CompileAndParse	autoload/xpt/snip.vim	/^fun! xpt#snip#CompileAndParse( so ) "{{{$/;"	f
xpt#snip#DefExt	autoload/xpt/snip.vim	/^fun! xpt#snip#DefExt( name, setting, lines ) "{{{$/;"	f
xpt#snip#DumbCursorInPlace	autoload/xpt/snip.vim	/^fun! xpt#snip#DumbCursorInPlace( so, phs ) "{{{$/;"	f
xpt#snip#EvalInstantFilters	autoload/xpt/snip.vim	/^fun! xpt#snip#EvalInstantFilters( so ) "{{{$/;"	f
xpt#snip#EvalPresetFilters	autoload/xpt/snip.vim	/^fun! xpt#snip#EvalPresetFilters( rctx, phs, ctx ) "{{{$/;"	f
xpt#snip#New	autoload/xpt/snip.vim	/^fun! xpt#snip#New( name, ftScope, snipText, prio, setting, patterns ) "{{{$/;"	f
xpt#snip#NewSlave	autoload/xpt/snip.vim	/^fun! xpt#snip#NewSlave( master, snipText ) "{{{$/;"	f
xpt#snip#Parse	autoload/xpt/snip.vim	/^fun! xpt#snip#Parse( so ) "{{{$/;"	f
xpt#snip#ParseInclusionStatement	autoload/xpt/snip.vim	/^fun! xpt#snip#ParseInclusionStatement( so, statement ) "{{{$/;"	f
xpt#snip#PostQuote	autoload/xpt/snip.vim	/^fun! xpt#snip#PostQuote( so ) "{{{$/;"	f
xpt#snip#Repetition	autoload/xpt/snip.vim	/^fun! xpt#snip#Repetition( so ) "{{{$/;"	f
xpt#snip#ReplacePH	autoload/xpt/snip.vim	/^fun! xpt#snip#ReplacePH( so, repls ) "{{{$/;"	f
xpt#snipf#GenPattern	autoload/xpt/snipf.vim	/^fun! xpt#snipf#GenPattern( marks ) "{{{$/;"	f
xpt#snipf#New	autoload/xpt/snipf.vim	/^fun! xpt#snipf#New( filename ) "{{{$/;"	f
xpt#snipf#Pop	autoload/xpt/snipf.vim	/^fun! xpt#snipf#Pop() "{{{$/;"	f
xpt#snipf#Push	autoload/xpt/snipf.vim	/^fun! xpt#snipf#Push() "{{{$/;"	f
xpt#snipfunc#Extend	autoload/xpt/snipfunc.vim	/^fun! xpt#snipfunc#Extend( container ) "{{{$/;"	f
xpt#snipline#New	autoload/xpt/snipline.vim	/^fun! xpt#snipline#New( elts ) "{{{$/;"	f
xpt#st#Extend	autoload/xpt/st.vim	/^fun! xpt#st#Extend( setting ) "{{{$/;"	f
xpt#st#InitItemOrderList	autoload/xpt/st.vim	/^fun! xpt#st#InitItemOrderList( setting ) "{{{$/;"	f
xpt#st#Merge	autoload/xpt/st.vim	/^fun! xpt#st#Merge( setting, fromSettings ) "{{{$/;"	f
xpt#st#New	autoload/xpt/st.vim	/^fun! xpt#st#New() "{{{$/;"	f
xpt#st#Parse	autoload/xpt/st.vim	/^fun! xpt#st#Parse( setting, snipObject ) "{{{$/;"	f
xpt#st#ParsePostQuoter	autoload/xpt/st.vim	/^fun! xpt#st#ParsePostQuoter( setting ) "{{{$/;"	f
xpt#st#RenderPhaseCopy	autoload/xpt/st.vim	/^fun! xpt#st#RenderPhaseCopy( setting ) "{{{$/;"	f
xpt#st#Simplify	autoload/xpt/st.vim	/^fun! xpt#st#Simplify( setting ) "{{{$/;"	f
xpt#st#What	autoload/xpt/st.vim	/^fun! xpt#st#What() "{{{$/;"	f
xpt#stsw#Add	autoload/xpt/stsw.vim	/^fun! xpt#stsw#Add( inst, key, value )  "{{{$/;"	f
xpt#stsw#AddList	autoload/xpt/stsw.vim	/^fun! xpt#stsw#AddList( inst, ... )  "{{{$/;"	f
xpt#stsw#New	autoload/xpt/stsw.vim	/^fun! xpt#stsw#New()  "{{{$/;"	f
xpt#stsw#Restore	autoload/xpt/stsw.vim	/^fun! xpt#stsw#Restore( inst )  "{{{$/;"	f
xpt#stsw#Switch	autoload/xpt/stsw.vim	/^fun! xpt#stsw#Switch( inst )  "{{{$/;"	f
xpt#test#parser#TestCompact	autoload/xpt/test/parser.vim	/^fun! xpt#test#parser#TestCompact() "{{{$/;"	f
xpt#util#AddIndent	autoload/xpt/util.vim	/^fun! xpt#util#AddIndent( text, nIndent ) "{{{$/;"	f
xpt#util#AddIndent2	autoload/xpt/util.vim	/^fun! xpt#util#AddIndent2( text, nIndent ) "{{{$/;"	f
xpt#util#DeepExtend	autoload/xpt/util.vim	/^fun! xpt#util#DeepExtend( to, from ) "{{{$/;"	f
xpt#util#ExpandTab	autoload/xpt/util.vim	/^fun! xpt#util#ExpandTab( text, n ) "{{{$/;"	f
xpt#util#Fallback	autoload/xpt/util.vim	/^fun! xpt#util#Fallback( fbs ) "{{{$/;"	f
xpt#util#GetPreferedIndentNr	autoload/xpt/util.vim	/^fun! xpt#util#GetPreferedIndentNr( ln ) "{{{$/;"	f
xpt#util#LastIndent	autoload/xpt/util.vim	/^fun! xpt#util#LastIndent( text ) "{{{$/;"	f
xpt#util#LinesBetween	autoload/xpt/util.vim	/^fun! xpt#util#LinesBetween( posList ) "{{{$/;"	f
xpt#util#NearestSynName	autoload/xpt/util.vim	/^fun! xpt#util#NearestSynName() "{{{$/;"	f
xpt#util#RemoveDuplicate	autoload/xpt/util.vim	/^fun! xpt#util#RemoveDuplicate( list ) "{{{$/;"	f
xpt#util#SpaceToTab	autoload/xpt/util.vim	/^fun! xpt#util#SpaceToTab( lines ) "{{{$/;"	f
xpt#util#SpaceToTabExceptFirstLine	autoload/xpt/util.vim	/^fun! xpt#util#SpaceToTabExceptFirstLine( lines ) "{{{$/;"	f
xpt#util#SplitWith	autoload/xpt/util.vim	/^fun! xpt#util#SplitWith( str, char ) "{{{$/;"	f
xpt#util#SynNameStack	autoload/xpt/util.vim	/^fun! xpt#util#SynNameStack(l, c) "{{{$/;"	f
xpt#util#TextBetween	autoload/xpt/util.vim	/^fun! xpt#util#TextBetween( posList ) "{{{$/;"	f
xpt#util#TextInLine	autoload/xpt/util.vim	/^fun! xpt#util#TextInLine( ln, s, e ) "{{{$/;"	f
xpt#util#UnescapeChar	autoload/xpt/util.vim	/^fun! xpt#util#UnescapeChar( str, chars ) "{{{$/;"	f
xpt#util#convertSpaceToTab	autoload/xpt/util.vim	/^fun! xpt#util#convertSpaceToTab( text ) "{{{$/;"	f
xpt#util#getCmdOutput	autoload/xpt/util.vim	/^fun! xpt#util#getCmdOutput( cmd ) "{{{$/;"	f
xpt#util#getIndentNr	autoload/xpt/util.vim	/^fun! xpt#util#getIndentNr( pos ) "{{{$/;"	f
{	plugin/xptemplate.conf.vim	/^    inoremap <silent> { <C-v><C-v><BS><C-r>=XPTtgr('{',{'noliteral':1,'k':'{'})<cr>$/;"	m
{	xptsnippets/ftplugin/ruby/ruby.xpt.vim	/^map { |`arg^| `cursor^ }$/;"	m
